
lab3_2_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c4  080035c4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080035c4  080035c4  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c4  080035c4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080035cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000002c  080035f8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080035f8  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009afe  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc6  00000000  00000000  00029b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d8f  00000000  00000000  0002cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd8d  00000000  00000000  00043857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008244d  00000000  00000000  0004f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1a31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ec  00000000  00000000  000d1a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800358c 	.word	0x0800358c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	0800358c 	.word	0x0800358c

0800014c <isTimeLogic>:
int bufferGreen = 3;
int timeRed = 5;
int timeAmber = 2;
int timeGreen = 3;

void isTimeLogic(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timeRed>timeGreen && timeGreen>timeAmber && (timeGreen == (timeRed - timeAmber))){
 8000150:	4b1d      	ldr	r3, [pc, #116]	; (80001c8 <isTimeLogic+0x7c>)
 8000152:	681a      	ldr	r2, [r3, #0]
 8000154:	4b1d      	ldr	r3, [pc, #116]	; (80001cc <isTimeLogic+0x80>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	429a      	cmp	r2, r3
 800015a:	dd15      	ble.n	8000188 <isTimeLogic+0x3c>
 800015c:	4b1b      	ldr	r3, [pc, #108]	; (80001cc <isTimeLogic+0x80>)
 800015e:	681a      	ldr	r2, [r3, #0]
 8000160:	4b1b      	ldr	r3, [pc, #108]	; (80001d0 <isTimeLogic+0x84>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	429a      	cmp	r2, r3
 8000166:	dd0f      	ble.n	8000188 <isTimeLogic+0x3c>
 8000168:	4b17      	ldr	r3, [pc, #92]	; (80001c8 <isTimeLogic+0x7c>)
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	4b18      	ldr	r3, [pc, #96]	; (80001d0 <isTimeLogic+0x84>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	1ad2      	subs	r2, r2, r3
 8000172:	4b16      	ldr	r3, [pc, #88]	; (80001cc <isTimeLogic+0x80>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	429a      	cmp	r2, r3
 8000178:	d106      	bne.n	8000188 <isTimeLogic+0x3c>
		HAL_GPIO_WritePin(WARNING_GPIO_Port, WARNING_Pin, GPIO_PIN_SET);
 800017a:	2201      	movs	r2, #1
 800017c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000180:	4814      	ldr	r0, [pc, #80]	; (80001d4 <isTimeLogic+0x88>)
 8000182:	f002 f9da 	bl	800253a <HAL_GPIO_WritePin>
		return;
 8000186:	e01d      	b.n	80001c4 <isTimeLogic+0x78>
	}else{
		if(timeRed>=5){
 8000188:	4b0f      	ldr	r3, [pc, #60]	; (80001c8 <isTimeLogic+0x7c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b04      	cmp	r3, #4
 800018e:	dd0a      	ble.n	80001a6 <isTimeLogic+0x5a>
			timeAmber = 2;
 8000190:	4b0f      	ldr	r3, [pc, #60]	; (80001d0 <isTimeLogic+0x84>)
 8000192:	2202      	movs	r2, #2
 8000194:	601a      	str	r2, [r3, #0]
			timeGreen = timeRed - timeAmber;
 8000196:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <isTimeLogic+0x7c>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <isTimeLogic+0x84>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	1ad3      	subs	r3, r2, r3
 80001a0:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <isTimeLogic+0x80>)
 80001a2:	6013      	str	r3, [r2, #0]
 80001a4:	e008      	b.n	80001b8 <isTimeLogic+0x6c>
		}else{
			 timeRed = 5;
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <isTimeLogic+0x7c>)
 80001a8:	2205      	movs	r2, #5
 80001aa:	601a      	str	r2, [r3, #0]
			 timeAmber = 2;
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <isTimeLogic+0x84>)
 80001ae:	2202      	movs	r2, #2
 80001b0:	601a      	str	r2, [r3, #0]
			 timeGreen = 3;
 80001b2:	4b06      	ldr	r3, [pc, #24]	; (80001cc <isTimeLogic+0x80>)
 80001b4:	2203      	movs	r2, #3
 80001b6:	601a      	str	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(WARNING_GPIO_Port, WARNING_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001be:	4805      	ldr	r0, [pc, #20]	; (80001d4 <isTimeLogic+0x88>)
 80001c0:	f002 f9bb 	bl	800253a <HAL_GPIO_WritePin>
	}

}
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	20000014 	.word	0x20000014
 80001d0:	20000010 	.word	0x20000010
 80001d4:	40010800 	.word	0x40010800

080001d8 <fsm_for_input_processing>:
// Have a total of 13 states
 void fsm_for_input_processing () {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	 currentState = nextState;
 80001dc:	4b97      	ldr	r3, [pc, #604]	; (800043c <fsm_for_input_processing+0x264>)
 80001de:	781a      	ldrb	r2, [r3, #0]
 80001e0:	4b97      	ldr	r3, [pc, #604]	; (8000440 <fsm_for_input_processing+0x268>)
 80001e2:	701a      	strb	r2, [r3, #0]
	switch (currentState){
 80001e4:	4b96      	ldr	r3, [pc, #600]	; (8000440 <fsm_for_input_processing+0x268>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b0c      	cmp	r3, #12
 80001ea:	f200 85a3 	bhi.w	8000d34 <fsm_for_input_processing+0xb5c>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <fsm_for_input_processing+0x1c>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	08000229 	.word	0x08000229
 80001f8:	08000265 	.word	0x08000265
 80001fc:	080005ff 	.word	0x080005ff
 8000200:	080009a5 	.word	0x080009a5
 8000204:	0800033d 	.word	0x0800033d
 8000208:	08000563 	.word	0x08000563
 800020c:	08000465 	.word	0x08000465
 8000210:	08000701 	.word	0x08000701
 8000214:	080007f7 	.word	0x080007f7
 8000218:	080008f5 	.word	0x080008f5
 800021c:	08000a95 	.word	0x08000a95
 8000220:	08000b83 	.word	0x08000b83
 8000224:	08000c8b 	.word	0x08000c8b
		case MODE1:

			//-------------------/
			isTimeLogic();
 8000228:	f7ff ff90 	bl	800014c <isTimeLogic>
			trafficLightRun(flagHalfSec, flag1Sec);
 800022c:	4b85      	ldr	r3, [pc, #532]	; (8000444 <fsm_for_input_processing+0x26c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a85      	ldr	r2, [pc, #532]	; (8000448 <fsm_for_input_processing+0x270>)
 8000232:	6812      	ldr	r2, [r2, #0]
 8000234:	4611      	mov	r1, r2
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fd36 	bl	8001ca8 <trafficLightRun>

			//-------------------/
			if(is_button_pressed(0)){
 800023c:	2000      	movs	r0, #0
 800023e:	f000 fe27 	bl	8000e90 <is_button_pressed>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	f000 855c 	beq.w	8000d02 <fsm_for_input_processing+0xb2a>
				nextState = MODE2;
 800024a:	4b7c      	ldr	r3, [pc, #496]	; (800043c <fsm_for_input_processing+0x264>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
				bufferRed = timeRed;
 8000250:	4b7e      	ldr	r3, [pc, #504]	; (800044c <fsm_for_input_processing+0x274>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a7e      	ldr	r2, [pc, #504]	; (8000450 <fsm_for_input_processing+0x278>)
 8000256:	6013      	str	r3, [r2, #0]
				update7SEG1(1,2);
 8000258:	2102      	movs	r1, #2
 800025a:	2001      	movs	r0, #1
 800025c:	f001 f9bc 	bl	80015d8 <update7SEG1>
			}

			break;
 8000260:	f000 bd4f 	b.w	8000d02 <fsm_for_input_processing+0xb2a>
		case MODE2://modify time of RED

			if(flagHalfSec){
 8000264:	4b77      	ldr	r3, [pc, #476]	; (8000444 <fsm_for_input_processing+0x26c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d007      	beq.n	800027c <fsm_for_input_processing+0xa4>
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 800026c:	2101      	movs	r1, #1
 800026e:	4879      	ldr	r0, [pc, #484]	; (8000454 <fsm_for_input_processing+0x27c>)
 8000270:	f002 f97b 	bl	800256a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 8000274:	2108      	movs	r1, #8
 8000276:	4877      	ldr	r0, [pc, #476]	; (8000454 <fsm_for_input_processing+0x27c>)
 8000278:	f002 f977 	bl	800256a <HAL_GPIO_TogglePin>
			}

			if(is_button_pressed(1)){
 800027c:	2001      	movs	r0, #1
 800027e:	f000 fe07 	bl	8000e90 <is_button_pressed>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d00f      	beq.n	80002a8 <fsm_for_input_processing+0xd0>
				nextState = INCREASE_RED;
 8000288:	4b6c      	ldr	r3, [pc, #432]	; (800043c <fsm_for_input_processing+0x264>)
 800028a:	2204      	movs	r2, #4
 800028c:	701a      	strb	r2, [r3, #0]
				bufferRed++;
 800028e:	4b70      	ldr	r3, [pc, #448]	; (8000450 <fsm_for_input_processing+0x278>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	4a6e      	ldr	r2, [pc, #440]	; (8000450 <fsm_for_input_processing+0x278>)
 8000296:	6013      	str	r3, [r2, #0]
				if(bufferRed>99) bufferRed = 1; // time of traffic light: 1-99
 8000298:	4b6d      	ldr	r3, [pc, #436]	; (8000450 <fsm_for_input_processing+0x278>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b63      	cmp	r3, #99	; 0x63
 800029e:	dd18      	ble.n	80002d2 <fsm_for_input_processing+0xfa>
 80002a0:	4b6b      	ldr	r3, [pc, #428]	; (8000450 <fsm_for_input_processing+0x278>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	e014      	b.n	80002d2 <fsm_for_input_processing+0xfa>
			}else if(is_button_pressed(3)){
 80002a8:	2003      	movs	r0, #3
 80002aa:	f000 fdf1 	bl	8000e90 <is_button_pressed>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d00e      	beq.n	80002d2 <fsm_for_input_processing+0xfa>
				nextState = DECREASE_RED;
 80002b4:	4b61      	ldr	r3, [pc, #388]	; (800043c <fsm_for_input_processing+0x264>)
 80002b6:	2206      	movs	r2, #6
 80002b8:	701a      	strb	r2, [r3, #0]
				bufferRed--;
 80002ba:	4b65      	ldr	r3, [pc, #404]	; (8000450 <fsm_for_input_processing+0x278>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3b01      	subs	r3, #1
 80002c0:	4a63      	ldr	r2, [pc, #396]	; (8000450 <fsm_for_input_processing+0x278>)
 80002c2:	6013      	str	r3, [r2, #0]
				if(bufferRed<1) bufferRed = 99; // time of traffic light: 1-99
 80002c4:	4b62      	ldr	r3, [pc, #392]	; (8000450 <fsm_for_input_processing+0x278>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	dc02      	bgt.n	80002d2 <fsm_for_input_processing+0xfa>
 80002cc:	4b60      	ldr	r3, [pc, #384]	; (8000450 <fsm_for_input_processing+0x278>)
 80002ce:	2263      	movs	r2, #99	; 0x63
 80002d0:	601a      	str	r2, [r3, #0]
			}

			if(is_button_pressed(2)){
 80002d2:	2002      	movs	r0, #2
 80002d4:	f000 fddc 	bl	8000e90 <is_button_pressed>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d006      	beq.n	80002ec <fsm_for_input_processing+0x114>
				nextState = SET_RED;
 80002de:	4b57      	ldr	r3, [pc, #348]	; (800043c <fsm_for_input_processing+0x264>)
 80002e0:	2205      	movs	r2, #5
 80002e2:	701a      	strb	r2, [r3, #0]
				timeRed = bufferRed;
 80002e4:	4b5a      	ldr	r3, [pc, #360]	; (8000450 <fsm_for_input_processing+0x278>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a58      	ldr	r2, [pc, #352]	; (800044c <fsm_for_input_processing+0x274>)
 80002ea:	6013      	str	r3, [r2, #0]
			}

			 //--- display time value ---/
			 if(flagHalfSec){
 80002ec:	4b55      	ldr	r3, [pc, #340]	; (8000444 <fsm_for_input_processing+0x26c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d005      	beq.n	8000300 <fsm_for_input_processing+0x128>
				update7SEG2(0,bufferRed);
 80002f4:	4b56      	ldr	r3, [pc, #344]	; (8000450 <fsm_for_input_processing+0x278>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4619      	mov	r1, r3
 80002fa:	2000      	movs	r0, #0
 80002fc:	f001 f9b4 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8000300:	4b51      	ldr	r3, [pc, #324]	; (8000448 <fsm_for_input_processing+0x270>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d005      	beq.n	8000314 <fsm_for_input_processing+0x13c>
				update7SEG2(1,bufferRed);
 8000308:	4b51      	ldr	r3, [pc, #324]	; (8000450 <fsm_for_input_processing+0x278>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4619      	mov	r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	f001 f9aa 	bl	8001668 <update7SEG2>
			}

			if(is_button_pressed(0)){
 8000314:	2000      	movs	r0, #0
 8000316:	f000 fdbb 	bl	8000e90 <is_button_pressed>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	f000 84f2 	beq.w	8000d06 <fsm_for_input_processing+0xb2e>
				nextState = MODE3;
 8000322:	4b46      	ldr	r3, [pc, #280]	; (800043c <fsm_for_input_processing+0x264>)
 8000324:	2202      	movs	r2, #2
 8000326:	701a      	strb	r2, [r3, #0]
				bufferAmber = timeAmber;
 8000328:	4b4b      	ldr	r3, [pc, #300]	; (8000458 <fsm_for_input_processing+0x280>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a4b      	ldr	r2, [pc, #300]	; (800045c <fsm_for_input_processing+0x284>)
 800032e:	6013      	str	r3, [r2, #0]
				update7SEG1(1,3);
 8000330:	2103      	movs	r1, #3
 8000332:	2001      	movs	r0, #1
 8000334:	f001 f950 	bl	80015d8 <update7SEG1>
			}

			break;
 8000338:	f000 bce5 	b.w	8000d06 <fsm_for_input_processing+0xb2e>
		case INCREASE_RED :
			if(flagHalfSec){
 800033c:	4b41      	ldr	r3, [pc, #260]	; (8000444 <fsm_for_input_processing+0x26c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d007      	beq.n	8000354 <fsm_for_input_processing+0x17c>
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8000344:	2101      	movs	r1, #1
 8000346:	4843      	ldr	r0, [pc, #268]	; (8000454 <fsm_for_input_processing+0x27c>)
 8000348:	f002 f90f 	bl	800256a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 800034c:	2108      	movs	r1, #8
 800034e:	4841      	ldr	r0, [pc, #260]	; (8000454 <fsm_for_input_processing+0x27c>)
 8000350:	f002 f90b 	bl	800256a <HAL_GPIO_TogglePin>
			}
			 if(!is_button_pressed(1)){
 8000354:	2001      	movs	r0, #1
 8000356:	f000 fd9b 	bl	8000e90 <is_button_pressed>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d102      	bne.n	8000366 <fsm_for_input_processing+0x18e>
				 nextState = MODE2 ;
 8000360:	4b36      	ldr	r3, [pc, #216]	; (800043c <fsm_for_input_processing+0x264>)
 8000362:	2201      	movs	r2, #1
 8000364:	701a      	strb	r2, [r3, #0]
			 }
			 if(is_button_pressed_1s(1)){
 8000366:	2001      	movs	r0, #1
 8000368:	f000 fdac 	bl	8000ec4 <is_button_pressed_1s>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d01d      	beq.n	80003ae <fsm_for_input_processing+0x1d6>
				 if(flagAuto == 1){
 8000372:	4b3b      	ldr	r3, [pc, #236]	; (8000460 <fsm_for_input_processing+0x288>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d12b      	bne.n	80003d2 <fsm_for_input_processing+0x1fa>
					 bufferRed++;
 800037a:	4b35      	ldr	r3, [pc, #212]	; (8000450 <fsm_for_input_processing+0x278>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	3301      	adds	r3, #1
 8000380:	4a33      	ldr	r2, [pc, #204]	; (8000450 <fsm_for_input_processing+0x278>)
 8000382:	6013      	str	r3, [r2, #0]
					 if(bufferRed>99) bufferRed = 1;
 8000384:	4b32      	ldr	r3, [pc, #200]	; (8000450 <fsm_for_input_processing+0x278>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b63      	cmp	r3, #99	; 0x63
 800038a:	dd02      	ble.n	8000392 <fsm_for_input_processing+0x1ba>
 800038c:	4b30      	ldr	r3, [pc, #192]	; (8000450 <fsm_for_input_processing+0x278>)
 800038e:	2201      	movs	r2, #1
 8000390:	601a      	str	r2, [r3, #0]
					 if(is_button_pressed(2)){
 8000392:	2002      	movs	r0, #2
 8000394:	f000 fd7c 	bl	8000e90 <is_button_pressed>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d019      	beq.n	80003d2 <fsm_for_input_processing+0x1fa>
						nextState = SET_RED;
 800039e:	4b27      	ldr	r3, [pc, #156]	; (800043c <fsm_for_input_processing+0x264>)
 80003a0:	2205      	movs	r2, #5
 80003a2:	701a      	strb	r2, [r3, #0]
						timeRed = bufferRed;
 80003a4:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <fsm_for_input_processing+0x278>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a28      	ldr	r2, [pc, #160]	; (800044c <fsm_for_input_processing+0x274>)
 80003aa:	6013      	str	r3, [r2, #0]
 80003ac:	e011      	b.n	80003d2 <fsm_for_input_processing+0x1fa>

					}
				 }
			 }
			 else if(is_button_pressed(1)){
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 fd6e 	bl	8000e90 <is_button_pressed>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d00b      	beq.n	80003d2 <fsm_for_input_processing+0x1fa>
					 bufferRed++;
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <fsm_for_input_processing+0x278>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	4a23      	ldr	r2, [pc, #140]	; (8000450 <fsm_for_input_processing+0x278>)
 80003c2:	6013      	str	r3, [r2, #0]
					 if(bufferRed>99) bufferRed = 1;
 80003c4:	4b22      	ldr	r3, [pc, #136]	; (8000450 <fsm_for_input_processing+0x278>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b63      	cmp	r3, #99	; 0x63
 80003ca:	dd02      	ble.n	80003d2 <fsm_for_input_processing+0x1fa>
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <fsm_for_input_processing+0x278>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]

			 }


			 //--- display time value ---/
			 if(flagHalfSec){
 80003d2:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <fsm_for_input_processing+0x26c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d005      	beq.n	80003e6 <fsm_for_input_processing+0x20e>
				update7SEG2(0,bufferRed);
 80003da:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <fsm_for_input_processing+0x278>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	2000      	movs	r0, #0
 80003e2:	f001 f941 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <fsm_for_input_processing+0x270>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d005      	beq.n	80003fa <fsm_for_input_processing+0x222>
				update7SEG2(1,bufferRed);
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <fsm_for_input_processing+0x278>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4619      	mov	r1, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	f001 f937 	bl	8001668 <update7SEG2>
			}

			if(is_button_pressed(2)){
 80003fa:	2002      	movs	r0, #2
 80003fc:	f000 fd48 	bl	8000e90 <is_button_pressed>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d006      	beq.n	8000414 <fsm_for_input_processing+0x23c>
				nextState = SET_RED;
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <fsm_for_input_processing+0x264>)
 8000408:	2205      	movs	r2, #5
 800040a:	701a      	strb	r2, [r3, #0]
				timeRed = bufferRed;
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <fsm_for_input_processing+0x278>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a0e      	ldr	r2, [pc, #56]	; (800044c <fsm_for_input_processing+0x274>)
 8000412:	6013      	str	r3, [r2, #0]
			}

			 if(is_button_pressed(0)){
 8000414:	2000      	movs	r0, #0
 8000416:	f000 fd3b 	bl	8000e90 <is_button_pressed>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	f000 8474 	beq.w	8000d0a <fsm_for_input_processing+0xb32>
					nextState = MODE3;
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <fsm_for_input_processing+0x264>)
 8000424:	2202      	movs	r2, #2
 8000426:	701a      	strb	r2, [r3, #0]
					bufferAmber = timeAmber;
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <fsm_for_input_processing+0x280>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <fsm_for_input_processing+0x284>)
 800042e:	6013      	str	r3, [r2, #0]
					update7SEG1(1,3);
 8000430:	2103      	movs	r1, #3
 8000432:	2001      	movs	r0, #1
 8000434:	f001 f8d0 	bl	80015d8 <update7SEG1>
				}
			 break ;
 8000438:	f000 bc67 	b.w	8000d0a <fsm_for_input_processing+0xb32>
 800043c:	20000049 	.word	0x20000049
 8000440:	20000048 	.word	0x20000048
 8000444:	20000064 	.word	0x20000064
 8000448:	20000068 	.word	0x20000068
 800044c:	2000000c 	.word	0x2000000c
 8000450:	20000000 	.word	0x20000000
 8000454:	40010800 	.word	0x40010800
 8000458:	20000010 	.word	0x20000010
 800045c:	20000004 	.word	0x20000004
 8000460:	2000006c 	.word	0x2000006c
		 case DECREASE_RED :
			 if(flagHalfSec){
 8000464:	4b9b      	ldr	r3, [pc, #620]	; (80006d4 <fsm_for_input_processing+0x4fc>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d007      	beq.n	800047c <fsm_for_input_processing+0x2a4>
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 800046c:	2101      	movs	r1, #1
 800046e:	489a      	ldr	r0, [pc, #616]	; (80006d8 <fsm_for_input_processing+0x500>)
 8000470:	f002 f87b 	bl	800256a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 8000474:	2108      	movs	r1, #8
 8000476:	4898      	ldr	r0, [pc, #608]	; (80006d8 <fsm_for_input_processing+0x500>)
 8000478:	f002 f877 	bl	800256a <HAL_GPIO_TogglePin>
			}
			 if( !is_button_pressed(3)){
 800047c:	2003      	movs	r0, #3
 800047e:	f000 fd07 	bl	8000e90 <is_button_pressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <fsm_for_input_processing+0x2b6>
				 nextState = MODE2 ;
 8000488:	4b94      	ldr	r3, [pc, #592]	; (80006dc <fsm_for_input_processing+0x504>)
 800048a:	2201      	movs	r2, #1
 800048c:	701a      	strb	r2, [r3, #0]
			 }
			 if(is_button_pressed_1s(3)){
 800048e:	2003      	movs	r0, #3
 8000490:	f000 fd18 	bl	8000ec4 <is_button_pressed_1s>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d01d      	beq.n	80004d6 <fsm_for_input_processing+0x2fe>
				 if(flagAuto == 1){
 800049a:	4b91      	ldr	r3, [pc, #580]	; (80006e0 <fsm_for_input_processing+0x508>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d12b      	bne.n	80004fa <fsm_for_input_processing+0x322>
					 bufferRed--;
 80004a2:	4b90      	ldr	r3, [pc, #576]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	4a8e      	ldr	r2, [pc, #568]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004aa:	6013      	str	r3, [r2, #0]
					 if(bufferRed<1) bufferRed = 99;
 80004ac:	4b8d      	ldr	r3, [pc, #564]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dc02      	bgt.n	80004ba <fsm_for_input_processing+0x2e2>
 80004b4:	4b8b      	ldr	r3, [pc, #556]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004b6:	2263      	movs	r2, #99	; 0x63
 80004b8:	601a      	str	r2, [r3, #0]
					 if(is_button_pressed(2)){
 80004ba:	2002      	movs	r0, #2
 80004bc:	f000 fce8 	bl	8000e90 <is_button_pressed>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d019      	beq.n	80004fa <fsm_for_input_processing+0x322>
						nextState = SET_RED;
 80004c6:	4b85      	ldr	r3, [pc, #532]	; (80006dc <fsm_for_input_processing+0x504>)
 80004c8:	2205      	movs	r2, #5
 80004ca:	701a      	strb	r2, [r3, #0]
						timeRed = bufferRed;
 80004cc:	4b85      	ldr	r3, [pc, #532]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a85      	ldr	r2, [pc, #532]	; (80006e8 <fsm_for_input_processing+0x510>)
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	e011      	b.n	80004fa <fsm_for_input_processing+0x322>

					}
				 }
			 }
			 else if(is_button_pressed(3)){
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 fcda 	bl	8000e90 <is_button_pressed>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d00b      	beq.n	80004fa <fsm_for_input_processing+0x322>
					 bufferRed--;
 80004e2:	4b80      	ldr	r3, [pc, #512]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	4a7e      	ldr	r2, [pc, #504]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004ea:	6013      	str	r3, [r2, #0]
					 if(bufferRed<1) bufferRed = 99;
 80004ec:	4b7d      	ldr	r3, [pc, #500]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dc02      	bgt.n	80004fa <fsm_for_input_processing+0x322>
 80004f4:	4b7b      	ldr	r3, [pc, #492]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80004f6:	2263      	movs	r2, #99	; 0x63
 80004f8:	601a      	str	r2, [r3, #0]

			 }
			 //--- display time value ---/
			 if(flagHalfSec){
 80004fa:	4b76      	ldr	r3, [pc, #472]	; (80006d4 <fsm_for_input_processing+0x4fc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d005      	beq.n	800050e <fsm_for_input_processing+0x336>
				update7SEG2(0,bufferRed);
 8000502:	4b78      	ldr	r3, [pc, #480]	; (80006e4 <fsm_for_input_processing+0x50c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4619      	mov	r1, r3
 8000508:	2000      	movs	r0, #0
 800050a:	f001 f8ad 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 800050e:	4b77      	ldr	r3, [pc, #476]	; (80006ec <fsm_for_input_processing+0x514>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d005      	beq.n	8000522 <fsm_for_input_processing+0x34a>
				update7SEG2(1,bufferRed);
 8000516:	4b73      	ldr	r3, [pc, #460]	; (80006e4 <fsm_for_input_processing+0x50c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4619      	mov	r1, r3
 800051c:	2001      	movs	r0, #1
 800051e:	f001 f8a3 	bl	8001668 <update7SEG2>
			}
			if(is_button_pressed(2)){
 8000522:	2002      	movs	r0, #2
 8000524:	f000 fcb4 	bl	8000e90 <is_button_pressed>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d006      	beq.n	800053c <fsm_for_input_processing+0x364>
				nextState = SET_RED;
 800052e:	4b6b      	ldr	r3, [pc, #428]	; (80006dc <fsm_for_input_processing+0x504>)
 8000530:	2205      	movs	r2, #5
 8000532:	701a      	strb	r2, [r3, #0]
				timeRed = bufferRed;
 8000534:	4b6b      	ldr	r3, [pc, #428]	; (80006e4 <fsm_for_input_processing+0x50c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a6b      	ldr	r2, [pc, #428]	; (80006e8 <fsm_for_input_processing+0x510>)
 800053a:	6013      	str	r3, [r2, #0]
			}
			 if(is_button_pressed(0)){
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fca7 	bl	8000e90 <is_button_pressed>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	f000 83e2 	beq.w	8000d0e <fsm_for_input_processing+0xb36>
					nextState = MODE3;
 800054a:	4b64      	ldr	r3, [pc, #400]	; (80006dc <fsm_for_input_processing+0x504>)
 800054c:	2202      	movs	r2, #2
 800054e:	701a      	strb	r2, [r3, #0]
					bufferAmber = timeAmber;
 8000550:	4b67      	ldr	r3, [pc, #412]	; (80006f0 <fsm_for_input_processing+0x518>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a67      	ldr	r2, [pc, #412]	; (80006f4 <fsm_for_input_processing+0x51c>)
 8000556:	6013      	str	r3, [r2, #0]
					update7SEG1(1,3);
 8000558:	2103      	movs	r1, #3
 800055a:	2001      	movs	r0, #1
 800055c:	f001 f83c 	bl	80015d8 <update7SEG1>
				}
			 break ;
 8000560:	e3d5      	b.n	8000d0e <fsm_for_input_processing+0xb36>
		 case SET_RED:

			 if(flagHalfSec){
 8000562:	4b5c      	ldr	r3, [pc, #368]	; (80006d4 <fsm_for_input_processing+0x4fc>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d007      	beq.n	800057a <fsm_for_input_processing+0x3a2>
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 800056a:	2101      	movs	r1, #1
 800056c:	485a      	ldr	r0, [pc, #360]	; (80006d8 <fsm_for_input_processing+0x500>)
 800056e:	f001 fffc 	bl	800256a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 8000572:	2108      	movs	r1, #8
 8000574:	4858      	ldr	r0, [pc, #352]	; (80006d8 <fsm_for_input_processing+0x500>)
 8000576:	f001 fff8 	bl	800256a <HAL_GPIO_TogglePin>
			}
			 if(!is_button_pressed(2)){
 800057a:	2002      	movs	r0, #2
 800057c:	f000 fc88 	bl	8000e90 <is_button_pressed>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d102      	bne.n	800058c <fsm_for_input_processing+0x3b4>
				 nextState = MODE2;
 8000586:	4b55      	ldr	r3, [pc, #340]	; (80006dc <fsm_for_input_processing+0x504>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
			 }
			 if(is_button_pressed(1)){
 800058c:	2001      	movs	r0, #1
 800058e:	f000 fc7f 	bl	8000e90 <is_button_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <fsm_for_input_processing+0x3c6>
				 nextState = INCREASE_RED;
 8000598:	4b50      	ldr	r3, [pc, #320]	; (80006dc <fsm_for_input_processing+0x504>)
 800059a:	2204      	movs	r2, #4
 800059c:	701a      	strb	r2, [r3, #0]
			 }

			 if(is_button_pressed(3)){
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 fc76 	bl	8000e90 <is_button_pressed>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <fsm_for_input_processing+0x3d8>
				 nextState = DECREASE_RED;
 80005aa:	4b4c      	ldr	r3, [pc, #304]	; (80006dc <fsm_for_input_processing+0x504>)
 80005ac:	2206      	movs	r2, #6
 80005ae:	701a      	strb	r2, [r3, #0]
			 }
			 //--- display time value ---/
			 if(flagHalfSec){
 80005b0:	4b48      	ldr	r3, [pc, #288]	; (80006d4 <fsm_for_input_processing+0x4fc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d005      	beq.n	80005c4 <fsm_for_input_processing+0x3ec>
				update7SEG2(0,bufferRed);
 80005b8:	4b4a      	ldr	r3, [pc, #296]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	2000      	movs	r0, #0
 80005c0:	f001 f852 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 80005c4:	4b49      	ldr	r3, [pc, #292]	; (80006ec <fsm_for_input_processing+0x514>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d005      	beq.n	80005d8 <fsm_for_input_processing+0x400>
				update7SEG2(1,bufferRed);
 80005cc:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <fsm_for_input_processing+0x50c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	f001 f848 	bl	8001668 <update7SEG2>
			}

			 if(is_button_pressed(0)){
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fc59 	bl	8000e90 <is_button_pressed>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	f000 8396 	beq.w	8000d12 <fsm_for_input_processing+0xb3a>
					nextState = MODE3;
 80005e6:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <fsm_for_input_processing+0x504>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
					bufferAmber = timeAmber;
 80005ec:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <fsm_for_input_processing+0x518>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a40      	ldr	r2, [pc, #256]	; (80006f4 <fsm_for_input_processing+0x51c>)
 80005f2:	6013      	str	r3, [r2, #0]
					update7SEG1(1,3);
 80005f4:	2103      	movs	r1, #3
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 ffee 	bl	80015d8 <update7SEG1>
				}
			 break;
 80005fc:	e389      	b.n	8000d12 <fsm_for_input_processing+0xb3a>

			 //-----modify time of AMBER-------//
		 case MODE3:
			if(flagHalfSec){
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <fsm_for_input_processing+0x4fc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d007      	beq.n	8000616 <fsm_for_input_processing+0x43e>
				HAL_GPIO_TogglePin(amber1_GPIO_Port, amber1_Pin);
 8000606:	2102      	movs	r1, #2
 8000608:	4833      	ldr	r0, [pc, #204]	; (80006d8 <fsm_for_input_processing+0x500>)
 800060a:	f001 ffae 	bl	800256a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(amber2_GPIO_Port, amber2_Pin);
 800060e:	2110      	movs	r1, #16
 8000610:	4831      	ldr	r0, [pc, #196]	; (80006d8 <fsm_for_input_processing+0x500>)
 8000612:	f001 ffaa 	bl	800256a <HAL_GPIO_TogglePin>
			}

			if(is_button_pressed(1)){
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fc3a 	bl	8000e90 <is_button_pressed>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00f      	beq.n	8000642 <fsm_for_input_processing+0x46a>
				nextState = INCREASE_AMBER;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <fsm_for_input_processing+0x504>)
 8000624:	2207      	movs	r2, #7
 8000626:	701a      	strb	r2, [r3, #0]
				bufferAmber++;
 8000628:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <fsm_for_input_processing+0x51c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	4a31      	ldr	r2, [pc, #196]	; (80006f4 <fsm_for_input_processing+0x51c>)
 8000630:	6013      	str	r3, [r2, #0]
				if(bufferAmber>99) bufferAmber = 1; // time of traffic light: 1-99
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <fsm_for_input_processing+0x51c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b63      	cmp	r3, #99	; 0x63
 8000638:	dd18      	ble.n	800066c <fsm_for_input_processing+0x494>
 800063a:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <fsm_for_input_processing+0x51c>)
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	e014      	b.n	800066c <fsm_for_input_processing+0x494>

			}else if(is_button_pressed(3)){
 8000642:	2003      	movs	r0, #3
 8000644:	f000 fc24 	bl	8000e90 <is_button_pressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00e      	beq.n	800066c <fsm_for_input_processing+0x494>
				nextState = DECREASE_AMBER;
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <fsm_for_input_processing+0x504>)
 8000650:	2208      	movs	r2, #8
 8000652:	701a      	strb	r2, [r3, #0]
				bufferAmber--;
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <fsm_for_input_processing+0x51c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <fsm_for_input_processing+0x51c>)
 800065c:	6013      	str	r3, [r2, #0]
				if(bufferAmber<1) bufferAmber = 99; // time of traffic light: 1-99
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <fsm_for_input_processing+0x51c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	dc02      	bgt.n	800066c <fsm_for_input_processing+0x494>
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <fsm_for_input_processing+0x51c>)
 8000668:	2263      	movs	r2, #99	; 0x63
 800066a:	601a      	str	r2, [r3, #0]

			}
			if(is_button_pressed(2)){
 800066c:	2002      	movs	r0, #2
 800066e:	f000 fc0f 	bl	8000e90 <is_button_pressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d006      	beq.n	8000686 <fsm_for_input_processing+0x4ae>
				nextState = SET_AMBER;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <fsm_for_input_processing+0x504>)
 800067a:	2209      	movs	r2, #9
 800067c:	701a      	strb	r2, [r3, #0]
				timeAmber = bufferAmber;
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <fsm_for_input_processing+0x51c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <fsm_for_input_processing+0x518>)
 8000684:	6013      	str	r3, [r2, #0]
			}
			 //--- display time value ---/
			 if(flagHalfSec){
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <fsm_for_input_processing+0x4fc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d005      	beq.n	800069a <fsm_for_input_processing+0x4c2>
				update7SEG2(0,bufferAmber);
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <fsm_for_input_processing+0x51c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	2000      	movs	r0, #0
 8000696:	f000 ffe7 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <fsm_for_input_processing+0x514>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d005      	beq.n	80006ae <fsm_for_input_processing+0x4d6>
				update7SEG2(1,bufferAmber);
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <fsm_for_input_processing+0x51c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 ffdd 	bl	8001668 <update7SEG2>
			}

			if(is_button_pressed(0)){
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 fbee 	bl	8000e90 <is_button_pressed>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f000 832d 	beq.w	8000d16 <fsm_for_input_processing+0xb3e>
				nextState = MODE4;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <fsm_for_input_processing+0x504>)
 80006be:	2203      	movs	r2, #3
 80006c0:	701a      	strb	r2, [r3, #0]
				bufferGreen = timeGreen;
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <fsm_for_input_processing+0x520>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <fsm_for_input_processing+0x524>)
 80006c8:	6013      	str	r3, [r2, #0]
				update7SEG1(1,4);
 80006ca:	2104      	movs	r1, #4
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 ff83 	bl	80015d8 <update7SEG1>
			}
			break;
 80006d2:	e320      	b.n	8000d16 <fsm_for_input_processing+0xb3e>
 80006d4:	20000064 	.word	0x20000064
 80006d8:	40010800 	.word	0x40010800
 80006dc:	20000049 	.word	0x20000049
 80006e0:	2000006c 	.word	0x2000006c
 80006e4:	20000000 	.word	0x20000000
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	20000068 	.word	0x20000068
 80006f0:	20000010 	.word	0x20000010
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000014 	.word	0x20000014
 80006fc:	20000008 	.word	0x20000008
		case INCREASE_AMBER :
			if(flagHalfSec){
 8000700:	4b9f      	ldr	r3, [pc, #636]	; (8000980 <fsm_for_input_processing+0x7a8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d007      	beq.n	8000718 <fsm_for_input_processing+0x540>
				HAL_GPIO_TogglePin(amber1_GPIO_Port, amber1_Pin);
 8000708:	2102      	movs	r1, #2
 800070a:	489e      	ldr	r0, [pc, #632]	; (8000984 <fsm_for_input_processing+0x7ac>)
 800070c:	f001 ff2d 	bl	800256a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(amber2_GPIO_Port, amber2_Pin);
 8000710:	2110      	movs	r1, #16
 8000712:	489c      	ldr	r0, [pc, #624]	; (8000984 <fsm_for_input_processing+0x7ac>)
 8000714:	f001 ff29 	bl	800256a <HAL_GPIO_TogglePin>
			}
			 if( !is_button_pressed(1)){
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fbb9 	bl	8000e90 <is_button_pressed>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d102      	bne.n	800072a <fsm_for_input_processing+0x552>
				 nextState = MODE3 ;
 8000724:	4b98      	ldr	r3, [pc, #608]	; (8000988 <fsm_for_input_processing+0x7b0>)
 8000726:	2202      	movs	r2, #2
 8000728:	701a      	strb	r2, [r3, #0]
			 }

			 if(is_button_pressed_1s(1)){
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fbca 	bl	8000ec4 <is_button_pressed_1s>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01d      	beq.n	8000772 <fsm_for_input_processing+0x59a>
				 if(flagAuto == 1){
 8000736:	4b95      	ldr	r3, [pc, #596]	; (800098c <fsm_for_input_processing+0x7b4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d12b      	bne.n	8000796 <fsm_for_input_processing+0x5be>
					 bufferAmber++;
 800073e:	4b94      	ldr	r3, [pc, #592]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a92      	ldr	r2, [pc, #584]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000746:	6013      	str	r3, [r2, #0]
					 if(bufferAmber>99) bufferAmber = 1;
 8000748:	4b91      	ldr	r3, [pc, #580]	; (8000990 <fsm_for_input_processing+0x7b8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b63      	cmp	r3, #99	; 0x63
 800074e:	dd02      	ble.n	8000756 <fsm_for_input_processing+0x57e>
 8000750:	4b8f      	ldr	r3, [pc, #572]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
					 if(is_button_pressed(2)){
 8000756:	2002      	movs	r0, #2
 8000758:	f000 fb9a 	bl	8000e90 <is_button_pressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d019      	beq.n	8000796 <fsm_for_input_processing+0x5be>
						nextState = SET_AMBER;
 8000762:	4b89      	ldr	r3, [pc, #548]	; (8000988 <fsm_for_input_processing+0x7b0>)
 8000764:	2209      	movs	r2, #9
 8000766:	701a      	strb	r2, [r3, #0]
						timeAmber = bufferAmber;
 8000768:	4b89      	ldr	r3, [pc, #548]	; (8000990 <fsm_for_input_processing+0x7b8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a89      	ldr	r2, [pc, #548]	; (8000994 <fsm_for_input_processing+0x7bc>)
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e011      	b.n	8000796 <fsm_for_input_processing+0x5be>

					}
				 }
			 }
			 else if(is_button_pressed(1)){
 8000772:	2001      	movs	r0, #1
 8000774:	f000 fb8c 	bl	8000e90 <is_button_pressed>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00b      	beq.n	8000796 <fsm_for_input_processing+0x5be>
				 bufferAmber++;
 800077e:	4b84      	ldr	r3, [pc, #528]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a82      	ldr	r2, [pc, #520]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000786:	6013      	str	r3, [r2, #0]
					 if(bufferAmber>99) bufferAmber = 1;
 8000788:	4b81      	ldr	r3, [pc, #516]	; (8000990 <fsm_for_input_processing+0x7b8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b63      	cmp	r3, #99	; 0x63
 800078e:	dd02      	ble.n	8000796 <fsm_for_input_processing+0x5be>
 8000790:	4b7f      	ldr	r3, [pc, #508]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]

			 }
			 //--- display time value ---/
			 if(flagHalfSec){
 8000796:	4b7a      	ldr	r3, [pc, #488]	; (8000980 <fsm_for_input_processing+0x7a8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d005      	beq.n	80007aa <fsm_for_input_processing+0x5d2>
				update7SEG2(0,bufferAmber);
 800079e:	4b7c      	ldr	r3, [pc, #496]	; (8000990 <fsm_for_input_processing+0x7b8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 ff5f 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 80007aa:	4b7b      	ldr	r3, [pc, #492]	; (8000998 <fsm_for_input_processing+0x7c0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d005      	beq.n	80007be <fsm_for_input_processing+0x5e6>
				update7SEG2(1,bufferAmber);
 80007b2:	4b77      	ldr	r3, [pc, #476]	; (8000990 <fsm_for_input_processing+0x7b8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 ff55 	bl	8001668 <update7SEG2>
			}

			if(is_button_pressed(2)){
 80007be:	2002      	movs	r0, #2
 80007c0:	f000 fb66 	bl	8000e90 <is_button_pressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <fsm_for_input_processing+0x600>
				nextState = SET_AMBER;
 80007ca:	4b6f      	ldr	r3, [pc, #444]	; (8000988 <fsm_for_input_processing+0x7b0>)
 80007cc:	2209      	movs	r2, #9
 80007ce:	701a      	strb	r2, [r3, #0]
				timeAmber = bufferAmber;
 80007d0:	4b6f      	ldr	r3, [pc, #444]	; (8000990 <fsm_for_input_processing+0x7b8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a6f      	ldr	r2, [pc, #444]	; (8000994 <fsm_for_input_processing+0x7bc>)
 80007d6:	6013      	str	r3, [r2, #0]
			}
			 if(is_button_pressed(0)){
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fb59 	bl	8000e90 <is_button_pressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	f000 829a 	beq.w	8000d1a <fsm_for_input_processing+0xb42>
					nextState = MODE4;
 80007e6:	4b68      	ldr	r3, [pc, #416]	; (8000988 <fsm_for_input_processing+0x7b0>)
 80007e8:	2203      	movs	r2, #3
 80007ea:	701a      	strb	r2, [r3, #0]
					update7SEG1(1,4);
 80007ec:	2104      	movs	r1, #4
 80007ee:	2001      	movs	r0, #1
 80007f0:	f000 fef2 	bl	80015d8 <update7SEG1>
				}
			 break ;
 80007f4:	e291      	b.n	8000d1a <fsm_for_input_processing+0xb42>
		 case DECREASE_AMBER :
				if(flagHalfSec){
 80007f6:	4b62      	ldr	r3, [pc, #392]	; (8000980 <fsm_for_input_processing+0x7a8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d007      	beq.n	800080e <fsm_for_input_processing+0x636>
					HAL_GPIO_TogglePin(amber1_GPIO_Port, amber1_Pin);
 80007fe:	2102      	movs	r1, #2
 8000800:	4860      	ldr	r0, [pc, #384]	; (8000984 <fsm_for_input_processing+0x7ac>)
 8000802:	f001 feb2 	bl	800256a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(amber2_GPIO_Port, amber2_Pin);
 8000806:	2110      	movs	r1, #16
 8000808:	485e      	ldr	r0, [pc, #376]	; (8000984 <fsm_for_input_processing+0x7ac>)
 800080a:	f001 feae 	bl	800256a <HAL_GPIO_TogglePin>
				}
			 if(!is_button_pressed(3)){
 800080e:	2003      	movs	r0, #3
 8000810:	f000 fb3e 	bl	8000e90 <is_button_pressed>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d102      	bne.n	8000820 <fsm_for_input_processing+0x648>
				 nextState = MODE3 ;
 800081a:	4b5b      	ldr	r3, [pc, #364]	; (8000988 <fsm_for_input_processing+0x7b0>)
 800081c:	2202      	movs	r2, #2
 800081e:	701a      	strb	r2, [r3, #0]
			 }
			 if(is_button_pressed_1s(3)){
 8000820:	2003      	movs	r0, #3
 8000822:	f000 fb4f 	bl	8000ec4 <is_button_pressed_1s>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d01d      	beq.n	8000868 <fsm_for_input_processing+0x690>
				 if(flagAuto == 1){
 800082c:	4b57      	ldr	r3, [pc, #348]	; (800098c <fsm_for_input_processing+0x7b4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d12b      	bne.n	800088c <fsm_for_input_processing+0x6b4>
					 bufferAmber--;
 8000834:	4b56      	ldr	r3, [pc, #344]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3b01      	subs	r3, #1
 800083a:	4a55      	ldr	r2, [pc, #340]	; (8000990 <fsm_for_input_processing+0x7b8>)
 800083c:	6013      	str	r3, [r2, #0]
					 if(bufferAmber<1) bufferAmber = 99;
 800083e:	4b54      	ldr	r3, [pc, #336]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	dc02      	bgt.n	800084c <fsm_for_input_processing+0x674>
 8000846:	4b52      	ldr	r3, [pc, #328]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000848:	2263      	movs	r2, #99	; 0x63
 800084a:	601a      	str	r2, [r3, #0]
					 if(is_button_pressed(3)){
 800084c:	2003      	movs	r0, #3
 800084e:	f000 fb1f 	bl	8000e90 <is_button_pressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d019      	beq.n	800088c <fsm_for_input_processing+0x6b4>
						nextState = SET_AMBER;
 8000858:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <fsm_for_input_processing+0x7b0>)
 800085a:	2209      	movs	r2, #9
 800085c:	701a      	strb	r2, [r3, #0]
						timeAmber = bufferAmber;
 800085e:	4b4c      	ldr	r3, [pc, #304]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a4c      	ldr	r2, [pc, #304]	; (8000994 <fsm_for_input_processing+0x7bc>)
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	e011      	b.n	800088c <fsm_for_input_processing+0x6b4>

					}
				 }
			 }
			 else if(is_button_pressed(1)){
 8000868:	2001      	movs	r0, #1
 800086a:	f000 fb11 	bl	8000e90 <is_button_pressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00b      	beq.n	800088c <fsm_for_input_processing+0x6b4>
				 bufferAmber--;
 8000874:	4b46      	ldr	r3, [pc, #280]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3b01      	subs	r3, #1
 800087a:	4a45      	ldr	r2, [pc, #276]	; (8000990 <fsm_for_input_processing+0x7b8>)
 800087c:	6013      	str	r3, [r2, #0]
					 if(bufferAmber<1) bufferAmber = 99;
 800087e:	4b44      	ldr	r3, [pc, #272]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	dc02      	bgt.n	800088c <fsm_for_input_processing+0x6b4>
 8000886:	4b42      	ldr	r3, [pc, #264]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000888:	2263      	movs	r2, #99	; 0x63
 800088a:	601a      	str	r2, [r3, #0]

			 }

			 //--- display time value ---/
			 if(flagHalfSec){
 800088c:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <fsm_for_input_processing+0x7a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <fsm_for_input_processing+0x6c8>
				update7SEG2(0,bufferAmber);
 8000894:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <fsm_for_input_processing+0x7b8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fee4 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 80008a0:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <fsm_for_input_processing+0x7c0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d005      	beq.n	80008b4 <fsm_for_input_processing+0x6dc>
				update7SEG2(1,bufferAmber);
 80008a8:	4b39      	ldr	r3, [pc, #228]	; (8000990 <fsm_for_input_processing+0x7b8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 feda 	bl	8001668 <update7SEG2>
			}
			if(is_button_pressed(2)){
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 faeb 	bl	8000e90 <is_button_pressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <fsm_for_input_processing+0x6f6>
				nextState = SET_AMBER;
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <fsm_for_input_processing+0x7b0>)
 80008c2:	2209      	movs	r2, #9
 80008c4:	701a      	strb	r2, [r3, #0]
				timeAmber = bufferAmber;
 80008c6:	4b32      	ldr	r3, [pc, #200]	; (8000990 <fsm_for_input_processing+0x7b8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <fsm_for_input_processing+0x7bc>)
 80008cc:	6013      	str	r3, [r2, #0]
			}
			 if(is_button_pressed(0)){
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 fade 	bl	8000e90 <is_button_pressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f000 8221 	beq.w	8000d1e <fsm_for_input_processing+0xb46>
					nextState = MODE4;
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <fsm_for_input_processing+0x7b0>)
 80008de:	2203      	movs	r2, #3
 80008e0:	701a      	strb	r2, [r3, #0]
					bufferGreen = timeGreen;
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <fsm_for_input_processing+0x7c4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a2e      	ldr	r2, [pc, #184]	; (80009a0 <fsm_for_input_processing+0x7c8>)
 80008e8:	6013      	str	r3, [r2, #0]
					update7SEG1(1,4);
 80008ea:	2104      	movs	r1, #4
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fe73 	bl	80015d8 <update7SEG1>
				}
			 break ;
 80008f2:	e214      	b.n	8000d1e <fsm_for_input_processing+0xb46>
		 case SET_AMBER:

				if(flagHalfSec){
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <fsm_for_input_processing+0x7a8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d007      	beq.n	800090c <fsm_for_input_processing+0x734>
					HAL_GPIO_TogglePin(amber1_GPIO_Port, amber1_Pin);
 80008fc:	2102      	movs	r1, #2
 80008fe:	4821      	ldr	r0, [pc, #132]	; (8000984 <fsm_for_input_processing+0x7ac>)
 8000900:	f001 fe33 	bl	800256a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(amber2_GPIO_Port, amber2_Pin);
 8000904:	2110      	movs	r1, #16
 8000906:	481f      	ldr	r0, [pc, #124]	; (8000984 <fsm_for_input_processing+0x7ac>)
 8000908:	f001 fe2f 	bl	800256a <HAL_GPIO_TogglePin>
				}
			 if(is_button_pressed(1)){
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fabf 	bl	8000e90 <is_button_pressed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <fsm_for_input_processing+0x746>
				 nextState = INCREASE_AMBER;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <fsm_for_input_processing+0x7b0>)
 800091a:	2207      	movs	r2, #7
 800091c:	701a      	strb	r2, [r3, #0]
			 }

			 if(is_button_pressed(3)){
 800091e:	2003      	movs	r0, #3
 8000920:	f000 fab6 	bl	8000e90 <is_button_pressed>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <fsm_for_input_processing+0x758>
				 nextState = DECREASE_AMBER;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <fsm_for_input_processing+0x7b0>)
 800092c:	2208      	movs	r2, #8
 800092e:	701a      	strb	r2, [r3, #0]
			 }

			 //--- display time value ---/
			 if(flagHalfSec){
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <fsm_for_input_processing+0x7a8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <fsm_for_input_processing+0x76c>
				update7SEG2(0,bufferAmber);
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <fsm_for_input_processing+0x7b8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	2000      	movs	r0, #0
 8000940:	f000 fe92 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <fsm_for_input_processing+0x7c0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d005      	beq.n	8000958 <fsm_for_input_processing+0x780>
				update7SEG2(1,bufferAmber);
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <fsm_for_input_processing+0x7b8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	2001      	movs	r0, #1
 8000954:	f000 fe88 	bl	8001668 <update7SEG2>
			}

			if(is_button_pressed(0)){
 8000958:	2000      	movs	r0, #0
 800095a:	f000 fa99 	bl	8000e90 <is_button_pressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 81de 	beq.w	8000d22 <fsm_for_input_processing+0xb4a>
				nextState = MODE4;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <fsm_for_input_processing+0x7b0>)
 8000968:	2203      	movs	r2, #3
 800096a:	701a      	strb	r2, [r3, #0]
				bufferGreen = timeGreen;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <fsm_for_input_processing+0x7c4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <fsm_for_input_processing+0x7c8>)
 8000972:	6013      	str	r3, [r2, #0]
				update7SEG1(1,4);
 8000974:	2104      	movs	r1, #4
 8000976:	2001      	movs	r0, #1
 8000978:	f000 fe2e 	bl	80015d8 <update7SEG1>
			}
			 break;
 800097c:	e1d1      	b.n	8000d22 <fsm_for_input_processing+0xb4a>
 800097e:	bf00      	nop
 8000980:	20000064 	.word	0x20000064
 8000984:	40010800 	.word	0x40010800
 8000988:	20000049 	.word	0x20000049
 800098c:	2000006c 	.word	0x2000006c
 8000990:	20000004 	.word	0x20000004
 8000994:	20000010 	.word	0x20000010
 8000998:	20000068 	.word	0x20000068
 800099c:	20000014 	.word	0x20000014
 80009a0:	20000008 	.word	0x20000008

			 //-----modify time of GREEN-------//
		 case MODE4:
			if(flagHalfSec){
 80009a4:	4b93      	ldr	r3, [pc, #588]	; (8000bf4 <fsm_for_input_processing+0xa1c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d007      	beq.n	80009bc <fsm_for_input_processing+0x7e4>
				HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 80009ac:	2104      	movs	r1, #4
 80009ae:	4892      	ldr	r0, [pc, #584]	; (8000bf8 <fsm_for_input_processing+0xa20>)
 80009b0:	f001 fddb 	bl	800256a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 80009b4:	2120      	movs	r1, #32
 80009b6:	4890      	ldr	r0, [pc, #576]	; (8000bf8 <fsm_for_input_processing+0xa20>)
 80009b8:	f001 fdd7 	bl	800256a <HAL_GPIO_TogglePin>
			}

			if(is_button_pressed(1)){
 80009bc:	2001      	movs	r0, #1
 80009be:	f000 fa67 	bl	8000e90 <is_button_pressed>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d01b      	beq.n	8000a00 <fsm_for_input_processing+0x828>
				nextState = INCREASE_GREEN;
 80009c8:	4b8c      	ldr	r3, [pc, #560]	; (8000bfc <fsm_for_input_processing+0xa24>)
 80009ca:	220a      	movs	r2, #10
 80009cc:	701a      	strb	r2, [r3, #0]
				bufferGreen++;
 80009ce:	4b8c      	ldr	r3, [pc, #560]	; (8000c00 <fsm_for_input_processing+0xa28>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a8a      	ldr	r2, [pc, #552]	; (8000c00 <fsm_for_input_processing+0xa28>)
 80009d6:	6013      	str	r3, [r2, #0]
				if(bufferGreen>99) bufferGreen = 1; // time of traffic light: 1-99
 80009d8:	4b89      	ldr	r3, [pc, #548]	; (8000c00 <fsm_for_input_processing+0xa28>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b63      	cmp	r3, #99	; 0x63
 80009de:	dd02      	ble.n	80009e6 <fsm_for_input_processing+0x80e>
 80009e0:	4b87      	ldr	r3, [pc, #540]	; (8000c00 <fsm_for_input_processing+0xa28>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
				if(is_button_pressed(2)){
 80009e6:	2002      	movs	r0, #2
 80009e8:	f000 fa52 	bl	8000e90 <is_button_pressed>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d006      	beq.n	8000a00 <fsm_for_input_processing+0x828>
					nextState = SET_GREEN;
 80009f2:	4b82      	ldr	r3, [pc, #520]	; (8000bfc <fsm_for_input_processing+0xa24>)
 80009f4:	220c      	movs	r2, #12
 80009f6:	701a      	strb	r2, [r3, #0]
					timeGreen = bufferGreen;
 80009f8:	4b81      	ldr	r3, [pc, #516]	; (8000c00 <fsm_for_input_processing+0xa28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a81      	ldr	r2, [pc, #516]	; (8000c04 <fsm_for_input_processing+0xa2c>)
 80009fe:	6013      	str	r3, [r2, #0]
				}
			}
			if(is_button_pressed(3)){
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 fa45 	bl	8000e90 <is_button_pressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d017      	beq.n	8000a3c <fsm_for_input_processing+0x864>
				nextState = DECREASE_GREEN;
 8000a0c:	4b7b      	ldr	r3, [pc, #492]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000a0e:	220b      	movs	r2, #11
 8000a10:	701a      	strb	r2, [r3, #0]
				bufferGreen--;
 8000a12:	4b7b      	ldr	r3, [pc, #492]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	4a79      	ldr	r2, [pc, #484]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000a1a:	6013      	str	r3, [r2, #0]
				if(bufferGreen<1) bufferGreen = 99; // time of traffic light: 1-99
 8000a1c:	4b78      	ldr	r3, [pc, #480]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dc02      	bgt.n	8000a2a <fsm_for_input_processing+0x852>
 8000a24:	4b76      	ldr	r3, [pc, #472]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000a26:	2263      	movs	r2, #99	; 0x63
 8000a28:	601a      	str	r2, [r3, #0]
				if(is_button_pressed(2)){
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f000 fa30 	bl	8000e90 <is_button_pressed>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <fsm_for_input_processing+0x864>
					nextState = SET_GREEN;
 8000a36:	4b71      	ldr	r3, [pc, #452]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000a38:	220c      	movs	r2, #12
 8000a3a:	701a      	strb	r2, [r3, #0]
				}
			}
			if(is_button_pressed(2)){
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 fa27 	bl	8000e90 <is_button_pressed>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <fsm_for_input_processing+0x87e>
				nextState = SET_GREEN;
 8000a48:	4b6c      	ldr	r3, [pc, #432]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	701a      	strb	r2, [r3, #0]
				timeGreen = bufferGreen;
 8000a4e:	4b6c      	ldr	r3, [pc, #432]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a6c      	ldr	r2, [pc, #432]	; (8000c04 <fsm_for_input_processing+0xa2c>)
 8000a54:	6013      	str	r3, [r2, #0]
			}
			 //--- display time value ---/
			 if(flagHalfSec){
 8000a56:	4b67      	ldr	r3, [pc, #412]	; (8000bf4 <fsm_for_input_processing+0xa1c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d005      	beq.n	8000a6a <fsm_for_input_processing+0x892>
				update7SEG2(0,bufferGreen);
 8000a5e:	4b68      	ldr	r3, [pc, #416]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 fdff 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8000a6a:	4b67      	ldr	r3, [pc, #412]	; (8000c08 <fsm_for_input_processing+0xa30>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d005      	beq.n	8000a7e <fsm_for_input_processing+0x8a6>
				update7SEG2(1,bufferGreen);
 8000a72:	4b63      	ldr	r3, [pc, #396]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 fdf5 	bl	8001668 <update7SEG2>
			}

			if(is_button_pressed(0)){
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 fa06 	bl	8000e90 <is_button_pressed>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 814d 	beq.w	8000d26 <fsm_for_input_processing+0xb4e>
				nextState = MODE1;
 8000a8c:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a92:	e148      	b.n	8000d26 <fsm_for_input_processing+0xb4e>
		case INCREASE_GREEN :
			if(flagHalfSec){
 8000a94:	4b57      	ldr	r3, [pc, #348]	; (8000bf4 <fsm_for_input_processing+0xa1c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d007      	beq.n	8000aac <fsm_for_input_processing+0x8d4>
				HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	4856      	ldr	r0, [pc, #344]	; (8000bf8 <fsm_for_input_processing+0xa20>)
 8000aa0:	f001 fd63 	bl	800256a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4854      	ldr	r0, [pc, #336]	; (8000bf8 <fsm_for_input_processing+0xa20>)
 8000aa8:	f001 fd5f 	bl	800256a <HAL_GPIO_TogglePin>
			}
			 if( !is_button_pressed(1)){
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f9ef 	bl	8000e90 <is_button_pressed>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <fsm_for_input_processing+0x8e6>
				 nextState = MODE4 ;
 8000ab8:	4b50      	ldr	r3, [pc, #320]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000aba:	2203      	movs	r2, #3
 8000abc:	701a      	strb	r2, [r3, #0]

			 }
			 if(is_button_pressed_1s(1)){
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fa00 	bl	8000ec4 <is_button_pressed_1s>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d01d      	beq.n	8000b06 <fsm_for_input_processing+0x92e>
				 if(flagAuto == 1){
 8000aca:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <fsm_for_input_processing+0xa34>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d12b      	bne.n	8000b2a <fsm_for_input_processing+0x952>
					 bufferGreen++;
 8000ad2:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a49      	ldr	r2, [pc, #292]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000ada:	6013      	str	r3, [r2, #0]
					 if(bufferGreen>99) bufferGreen = 1;
 8000adc:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b63      	cmp	r3, #99	; 0x63
 8000ae2:	dd02      	ble.n	8000aea <fsm_for_input_processing+0x912>
 8000ae4:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
					 if(is_button_pressed(2)){
 8000aea:	2002      	movs	r0, #2
 8000aec:	f000 f9d0 	bl	8000e90 <is_button_pressed>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d019      	beq.n	8000b2a <fsm_for_input_processing+0x952>
						nextState = SET_GREEN;
 8000af6:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000af8:	220c      	movs	r2, #12
 8000afa:	701a      	strb	r2, [r3, #0]
						timeGreen = bufferGreen;
 8000afc:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <fsm_for_input_processing+0xa2c>)
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e011      	b.n	8000b2a <fsm_for_input_processing+0x952>

					}
				 }
			 }
			 else if(is_button_pressed(1)){
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 f9c2 	bl	8000e90 <is_button_pressed>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00b      	beq.n	8000b2a <fsm_for_input_processing+0x952>
				 bufferGreen++;
 8000b12:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a39      	ldr	r2, [pc, #228]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000b1a:	6013      	str	r3, [r2, #0]
					 if(bufferGreen>99) bufferGreen = 1;
 8000b1c:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b63      	cmp	r3, #99	; 0x63
 8000b22:	dd02      	ble.n	8000b2a <fsm_for_input_processing+0x952>
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]

			 }
			 //--- display time value ---/
			 if(flagHalfSec){
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <fsm_for_input_processing+0xa1c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d005      	beq.n	8000b3e <fsm_for_input_processing+0x966>
				update7SEG2(0,bufferGreen);
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 fd95 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <fsm_for_input_processing+0xa30>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d005      	beq.n	8000b52 <fsm_for_input_processing+0x97a>
				update7SEG2(1,bufferGreen);
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fd8b 	bl	8001668 <update7SEG2>
			}

			if(is_button_pressed(2)){
 8000b52:	2002      	movs	r0, #2
 8000b54:	f000 f99c 	bl	8000e90 <is_button_pressed>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <fsm_for_input_processing+0x994>
				nextState = SET_GREEN;
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000b60:	220c      	movs	r2, #12
 8000b62:	701a      	strb	r2, [r3, #0]
				timeGreen = bufferGreen;
 8000b64:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <fsm_for_input_processing+0xa2c>)
 8000b6a:	6013      	str	r3, [r2, #0]
			}
			 if(is_button_pressed(0)){
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 f98f 	bl	8000e90 <is_button_pressed>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 80d8 	beq.w	8000d2a <fsm_for_input_processing+0xb52>
					nextState = MODE1;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]

				}
			 break ;
 8000b80:	e0d3      	b.n	8000d2a <fsm_for_input_processing+0xb52>
		 case DECREASE_GREEN :
				if(flagHalfSec){
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <fsm_for_input_processing+0xa1c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d007      	beq.n	8000b9a <fsm_for_input_processing+0x9c2>
					HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <fsm_for_input_processing+0xa20>)
 8000b8e:	f001 fcec 	bl	800256a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 8000b92:	2120      	movs	r1, #32
 8000b94:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <fsm_for_input_processing+0xa20>)
 8000b96:	f001 fce8 	bl	800256a <HAL_GPIO_TogglePin>
				}
			 if( !is_button_pressed(3)){
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 f978 	bl	8000e90 <is_button_pressed>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <fsm_for_input_processing+0x9d4>
				 nextState = MODE4 ;
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000ba8:	2203      	movs	r2, #3
 8000baa:	701a      	strb	r2, [r3, #0]
			 }
				 if(is_button_pressed_1s(3)){
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f989 	bl	8000ec4 <is_button_pressed_1s>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d02b      	beq.n	8000c10 <fsm_for_input_processing+0xa38>
					 if(flagAuto == 1){
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <fsm_for_input_processing+0xa34>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d139      	bne.n	8000c34 <fsm_for_input_processing+0xa5c>
						 bufferGreen--;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000bc8:	6013      	str	r3, [r2, #0]
						 if(bufferGreen<1) bufferGreen = 99;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	dc02      	bgt.n	8000bd8 <fsm_for_input_processing+0xa00>
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000bd4:	2263      	movs	r2, #99	; 0x63
 8000bd6:	601a      	str	r2, [r3, #0]
						 if(is_button_pressed(2)){
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f000 f959 	bl	8000e90 <is_button_pressed>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d027      	beq.n	8000c34 <fsm_for_input_processing+0xa5c>
							nextState = SET_GREEN;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <fsm_for_input_processing+0xa24>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	701a      	strb	r2, [r3, #0]
							timeGreen = bufferGreen;
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <fsm_for_input_processing+0xa28>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <fsm_for_input_processing+0xa2c>)
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e01f      	b.n	8000c34 <fsm_for_input_processing+0xa5c>
 8000bf4:	20000064 	.word	0x20000064
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	20000049 	.word	0x20000049
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000014 	.word	0x20000014
 8000c08:	20000068 	.word	0x20000068
 8000c0c:	2000006c 	.word	0x2000006c

						}
					 }
				 }
				 else if(is_button_pressed(3)){
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f93d 	bl	8000e90 <is_button_pressed>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00b      	beq.n	8000c34 <fsm_for_input_processing+0xa5c>
					 bufferGreen--;
 8000c1c:	4b46      	ldr	r3, [pc, #280]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	4a45      	ldr	r2, [pc, #276]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000c24:	6013      	str	r3, [r2, #0]
						 if(bufferGreen<1) bufferGreen = 99;
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	dc02      	bgt.n	8000c34 <fsm_for_input_processing+0xa5c>
 8000c2e:	4b42      	ldr	r3, [pc, #264]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000c30:	2263      	movs	r2, #99	; 0x63
 8000c32:	601a      	str	r2, [r3, #0]

				 }
			 //--- display time value ---/
			 if(flagHalfSec){
 8000c34:	4b41      	ldr	r3, [pc, #260]	; (8000d3c <fsm_for_input_processing+0xb64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <fsm_for_input_processing+0xa70>
				update7SEG2(0,bufferGreen);
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 fd10 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8000c48:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <fsm_for_input_processing+0xb68>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d005      	beq.n	8000c5c <fsm_for_input_processing+0xa84>
				update7SEG2(1,bufferGreen);
 8000c50:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fd06 	bl	8001668 <update7SEG2>
			}
			if(is_button_pressed(2)){
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f000 f917 	bl	8000e90 <is_button_pressed>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <fsm_for_input_processing+0xa9e>
				nextState = SET_GREEN;
 8000c68:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <fsm_for_input_processing+0xb6c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	701a      	strb	r2, [r3, #0]
				timeGreen = bufferGreen;
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a35      	ldr	r2, [pc, #212]	; (8000d48 <fsm_for_input_processing+0xb70>)
 8000c74:	6013      	str	r3, [r2, #0]
			}
			 if(is_button_pressed(0)){
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f90a 	bl	8000e90 <is_button_pressed>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d055      	beq.n	8000d2e <fsm_for_input_processing+0xb56>
					nextState = MODE1;
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <fsm_for_input_processing+0xb6c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
				}
			 break ;
 8000c88:	e051      	b.n	8000d2e <fsm_for_input_processing+0xb56>
		 case SET_GREEN:

				if(flagHalfSec){
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <fsm_for_input_processing+0xb64>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <fsm_for_input_processing+0xaca>
					HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8000c92:	2104      	movs	r1, #4
 8000c94:	482d      	ldr	r0, [pc, #180]	; (8000d4c <fsm_for_input_processing+0xb74>)
 8000c96:	f001 fc68 	bl	800256a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	482b      	ldr	r0, [pc, #172]	; (8000d4c <fsm_for_input_processing+0xb74>)
 8000c9e:	f001 fc64 	bl	800256a <HAL_GPIO_TogglePin>
				}
			 if(is_button_pressed(1)){
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 f8f4 	bl	8000e90 <is_button_pressed>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <fsm_for_input_processing+0xadc>
				 nextState = INCREASE_GREEN;
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <fsm_for_input_processing+0xb6c>)
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	701a      	strb	r2, [r3, #0]
			 }

			 if(is_button_pressed(3)){
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8eb 	bl	8000e90 <is_button_pressed>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <fsm_for_input_processing+0xaee>
				 nextState = DECREASE_AMBER;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <fsm_for_input_processing+0xb6c>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	701a      	strb	r2, [r3, #0]
			 }
			 //--- display time value ---/
			 if(flagHalfSec){
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <fsm_for_input_processing+0xb64>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <fsm_for_input_processing+0xb02>
				update7SEG2(0,bufferGreen);
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 fcc7 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <fsm_for_input_processing+0xb68>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <fsm_for_input_processing+0xb16>
				update7SEG2(1,bufferGreen);
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <fsm_for_input_processing+0xb60>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fcbd 	bl	8001668 <update7SEG2>
			}

			 if(is_button_pressed(0)){
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f8ce 	bl	8000e90 <is_button_pressed>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d01b      	beq.n	8000d32 <fsm_for_input_processing+0xb5a>
				nextState = MODE1;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <fsm_for_input_processing+0xb6c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

			}
			 break;
 8000d00:	e017      	b.n	8000d32 <fsm_for_input_processing+0xb5a>
			break;
 8000d02:	bf00      	nop
 8000d04:	e016      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			break;
 8000d06:	bf00      	nop
 8000d08:	e014      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break ;
 8000d0a:	bf00      	nop
 8000d0c:	e012      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break ;
 8000d0e:	bf00      	nop
 8000d10:	e010      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break;
 8000d12:	bf00      	nop
 8000d14:	e00e      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			break;
 8000d16:	bf00      	nop
 8000d18:	e00c      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break ;
 8000d1a:	bf00      	nop
 8000d1c:	e00a      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break ;
 8000d1e:	bf00      	nop
 8000d20:	e008      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break;
 8000d22:	bf00      	nop
 8000d24:	e006      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			break;
 8000d26:	bf00      	nop
 8000d28:	e004      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break ;
 8000d2a:	bf00      	nop
 8000d2c:	e002      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break ;
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <fsm_for_input_processing+0xb5c>
			 break;
 8000d32:	bf00      	nop

	 }
 }
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000064 	.word	0x20000064
 8000d40:	20000068 	.word	0x20000068
 8000d44:	20000049 	.word	0x20000049
 8000d48:	20000014 	.word	0x20000014
 8000d4c:	40010800 	.word	0x40010800

08000d50 <readPin>:
 static uint8_t flagForButtonPress1s [N0_OF_BUTTONS];
 // we define counter for automatically increasing the value
 // after the button is pressed more than 1 second .
 static uint16_t counterForButtonPress1s [N0_OF_BUTTONS];
//int  autoIncrease = 25;
GPIO_PinState readPin(int button){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d828      	bhi.n	8000db0 <readPin+0x60>
 8000d5e:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <readPin+0x14>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d75 	.word	0x08000d75
 8000d68:	08000d83 	.word	0x08000d83
 8000d6c:	08000d91 	.word	0x08000d91
 8000d70:	08000da1 	.word	0x08000da1
	GPIO_PinState state ;
	switch(button){
			case 0: state = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin ) ; break;
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	4811      	ldr	r0, [pc, #68]	; (8000dbc <readPin+0x6c>)
 8000d78:	f001 fbc8 	bl	800250c <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e017      	b.n	8000db2 <readPin+0x62>
			case 1: state = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin ) ; break;
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <readPin+0x6c>)
 8000d86:	f001 fbc1 	bl	800250c <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e010      	b.n	8000db2 <readPin+0x62>
			case 2: state = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin ) ; break;
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <readPin+0x6c>)
 8000d96:	f001 fbb9 	bl	800250c <HAL_GPIO_ReadPin>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e008      	b.n	8000db2 <readPin+0x62>
			case 3: state = HAL_GPIO_ReadPin(button4_GPIO_Port, button4_Pin ) ; break;
 8000da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <readPin+0x6c>)
 8000da6:	f001 fbb1 	bl	800250c <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e000      	b.n	8000db2 <readPin+0x62>
			default: break;
 8000db0:	bf00      	nop
		}
	return state;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40010800 	.word	0x40010800

08000dc0 <button_reading>:
 void button_reading ( void ) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	 for ( int i = 0; i < N0_OF_BUTTONS ; i++) {
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	e04f      	b.n	8000e6c <button_reading+0xac>
		 debounceButtonBuffer2 [i] = debounceButtonBuffer1 [ i ];
 8000dcc:	4a2b      	ldr	r2, [pc, #172]	; (8000e7c <button_reading+0xbc>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	7819      	ldrb	r1, [r3, #0]
 8000dd4:	4a2a      	ldr	r2, [pc, #168]	; (8000e80 <button_reading+0xc0>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	460a      	mov	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
		 debounceButtonBuffer1 [i] = readPin(i) ;
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffb6 	bl	8000d50 <readPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4619      	mov	r1, r3
 8000de8:	4a24      	ldr	r2, [pc, #144]	; (8000e7c <button_reading+0xbc>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	460a      	mov	r2, r1
 8000df0:	701a      	strb	r2, [r3, #0]
		 if( debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000df2:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <button_reading+0xbc>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	4921      	ldr	r1, [pc, #132]	; (8000e80 <button_reading+0xc0>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	440b      	add	r3, r1
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d108      	bne.n	8000e18 <button_reading+0x58>
			 buttonBuffer[i] = debounceButtonBuffer1[i];
 8000e06:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <button_reading+0xbc>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	7819      	ldrb	r1, [r3, #0]
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <button_reading+0xc4>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	460a      	mov	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
		 if( buttonBuffer[i] == GPIO_PIN_RESET) {
 8000e18:	4a1a      	ldr	r2, [pc, #104]	; (8000e84 <button_reading+0xc4>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d116      	bne.n	8000e52 <button_reading+0x92>
			 // if a button is pressed , we start counting
			 if( counterForButtonPress1s[i] <DURATION_FOR_AUTO_INCREASING ){
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <button_reading+0xc8>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e2c:	2b63      	cmp	r3, #99	; 0x63
 8000e2e:	d80a      	bhi.n	8000e46 <button_reading+0x86>
				 counterForButtonPress1s[i]++;
 8000e30:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <button_reading+0xc8>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <button_reading+0xc8>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e44:	e00f      	b.n	8000e66 <button_reading+0xa6>
			 } else {
				// the flag is turned on when 1 second has passed
				 // since the button is pressed .
				 flagForButtonPress1s [i] = 1;
 8000e46:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <button_reading+0xcc>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e009      	b.n	8000e66 <button_reading+0xa6>

			 }
		 } else {
			 counterForButtonPress1s[i] = 0;
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <button_reading+0xc8>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2100      	movs	r1, #0
 8000e58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 flagForButtonPress1s[i] = 0;
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <button_reading+0xcc>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
	 for ( int i = 0; i < N0_OF_BUTTONS ; i++) {
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	ddac      	ble.n	8000dcc <button_reading+0xc>
		 }
	 }
 }
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000050 	.word	0x20000050
 8000e80:	20000054 	.word	0x20000054
 8000e84:	2000004c 	.word	0x2000004c
 8000e88:	2000005c 	.word	0x2000005c
 8000e8c:	20000058 	.word	0x20000058

08000e90 <is_button_pressed>:

int is_button_pressed(int index){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	 if( index >= N0_OF_BUTTONS ) return 0;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	dd01      	ble.n	8000ea2 <is_button_pressed+0x12>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e008      	b.n	8000eb4 <is_button_pressed+0x24>
	 if(buttonBuffer[index] == GPIO_PIN_RESET) return 1;
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <is_button_pressed+0x30>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <is_button_pressed+0x22>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <is_button_pressed+0x24>
	 else return 0;
 8000eb2:	2300      	movs	r3, #0
	//return ( buttonBuffer [ index ] == BUTTON_IS_PRESSED ) ;
 }
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000004c 	.word	0x2000004c

08000ec4 <is_button_pressed_1s>:

int is_button_pressed_1s (int index ) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	 if( index >= N0_OF_BUTTONS ) return 0xff ;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	dd01      	ble.n	8000ed6 <is_button_pressed_1s+0x12>
 8000ed2:	23ff      	movs	r3, #255	; 0xff
 8000ed4:	e008      	b.n	8000ee8 <is_button_pressed_1s+0x24>
	 if(flagForButtonPress1s [index] == 1) return 1;
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <is_button_pressed_1s+0x30>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <is_button_pressed_1s+0x22>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <is_button_pressed_1s+0x24>
	 	 else return 0;
 8000ee6:	2300      	movs	r3, #0
	 //return ( flagForButtonPress1s [ index ] == 1) ;
 }
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000058 	.word	0x20000058

08000ef8 <display7SEG1>:
 *      Author: MINH TRI
 */
#include "main.h"
#include "led_display.h"
#include "trafficLight.h"
void display7SEG1(int num){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b09      	cmp	r3, #9
 8000f04:	f200 818a 	bhi.w	800121c <display7SEG1+0x324>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <display7SEG1+0x18>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f39 	.word	0x08000f39
 8000f14:	08000f83 	.word	0x08000f83
 8000f18:	08000fcd 	.word	0x08000fcd
 8000f1c:	08001017 	.word	0x08001017
 8000f20:	08001061 	.word	0x08001061
 8000f24:	080010ab 	.word	0x080010ab
 8000f28:	080010f5 	.word	0x080010f5
 8000f2c:	0800113f 	.word	0x0800113f
 8000f30:	08001189 	.word	0x08001189
 8000f34:	080011d3 	.word	0x080011d3
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	48b9      	ldr	r0, [pc, #740]	; (8001224 <display7SEG1+0x32c>)
 8000f3e:	f001 fafc 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2108      	movs	r1, #8
 8000f46:	48b7      	ldr	r0, [pc, #732]	; (8001224 <display7SEG1+0x32c>)
 8000f48:	f001 faf7 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2110      	movs	r1, #16
 8000f50:	48b4      	ldr	r0, [pc, #720]	; (8001224 <display7SEG1+0x32c>)
 8000f52:	f001 faf2 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2120      	movs	r1, #32
 8000f5a:	48b2      	ldr	r0, [pc, #712]	; (8001224 <display7SEG1+0x32c>)
 8000f5c:	f001 faed 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	48af      	ldr	r0, [pc, #700]	; (8001224 <display7SEG1+0x32c>)
 8000f66:	f001 fae8 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	48ad      	ldr	r0, [pc, #692]	; (8001224 <display7SEG1+0x32c>)
 8000f70:	f001 fae3 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	48aa      	ldr	r0, [pc, #680]	; (8001224 <display7SEG1+0x32c>)
 8000f7c:	f001 fadd 	bl	800253a <HAL_GPIO_WritePin>
		break;
 8000f80:	e14c      	b.n	800121c <display7SEG1+0x324>
	case 1:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2104      	movs	r1, #4
 8000f86:	48a7      	ldr	r0, [pc, #668]	; (8001224 <display7SEG1+0x32c>)
 8000f88:	f001 fad7 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2108      	movs	r1, #8
 8000f90:	48a4      	ldr	r0, [pc, #656]	; (8001224 <display7SEG1+0x32c>)
 8000f92:	f001 fad2 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2110      	movs	r1, #16
 8000f9a:	48a2      	ldr	r0, [pc, #648]	; (8001224 <display7SEG1+0x32c>)
 8000f9c:	f001 facd 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	489f      	ldr	r0, [pc, #636]	; (8001224 <display7SEG1+0x32c>)
 8000fa6:	f001 fac8 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	489d      	ldr	r0, [pc, #628]	; (8001224 <display7SEG1+0x32c>)
 8000fb0:	f001 fac3 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	489a      	ldr	r0, [pc, #616]	; (8001224 <display7SEG1+0x32c>)
 8000fba:	f001 fabe 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc4:	4897      	ldr	r0, [pc, #604]	; (8001224 <display7SEG1+0x32c>)
 8000fc6:	f001 fab8 	bl	800253a <HAL_GPIO_WritePin>
		break;
 8000fca:	e127      	b.n	800121c <display7SEG1+0x324>
	case 2:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4894      	ldr	r0, [pc, #592]	; (8001224 <display7SEG1+0x32c>)
 8000fd2:	f001 fab2 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4892      	ldr	r0, [pc, #584]	; (8001224 <display7SEG1+0x32c>)
 8000fdc:	f001 faad 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	488f      	ldr	r0, [pc, #572]	; (8001224 <display7SEG1+0x32c>)
 8000fe6:	f001 faa8 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	488d      	ldr	r0, [pc, #564]	; (8001224 <display7SEG1+0x32c>)
 8000ff0:	f001 faa3 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	488a      	ldr	r0, [pc, #552]	; (8001224 <display7SEG1+0x32c>)
 8000ffa:	f001 fa9e 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	4888      	ldr	r0, [pc, #544]	; (8001224 <display7SEG1+0x32c>)
 8001004:	f001 fa99 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100e:	4885      	ldr	r0, [pc, #532]	; (8001224 <display7SEG1+0x32c>)
 8001010:	f001 fa93 	bl	800253a <HAL_GPIO_WritePin>
		break;
 8001014:	e102      	b.n	800121c <display7SEG1+0x324>
	case 3:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2104      	movs	r1, #4
 800101a:	4882      	ldr	r0, [pc, #520]	; (8001224 <display7SEG1+0x32c>)
 800101c:	f001 fa8d 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2108      	movs	r1, #8
 8001024:	487f      	ldr	r0, [pc, #508]	; (8001224 <display7SEG1+0x32c>)
 8001026:	f001 fa88 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2110      	movs	r1, #16
 800102e:	487d      	ldr	r0, [pc, #500]	; (8001224 <display7SEG1+0x32c>)
 8001030:	f001 fa83 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2120      	movs	r1, #32
 8001038:	487a      	ldr	r0, [pc, #488]	; (8001224 <display7SEG1+0x32c>)
 800103a:	f001 fa7e 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	4878      	ldr	r0, [pc, #480]	; (8001224 <display7SEG1+0x32c>)
 8001044:	f001 fa79 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	4875      	ldr	r0, [pc, #468]	; (8001224 <display7SEG1+0x32c>)
 800104e:	f001 fa74 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4872      	ldr	r0, [pc, #456]	; (8001224 <display7SEG1+0x32c>)
 800105a:	f001 fa6e 	bl	800253a <HAL_GPIO_WritePin>
		break;
 800105e:	e0dd      	b.n	800121c <display7SEG1+0x324>
	case 4:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2104      	movs	r1, #4
 8001064:	486f      	ldr	r0, [pc, #444]	; (8001224 <display7SEG1+0x32c>)
 8001066:	f001 fa68 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2108      	movs	r1, #8
 800106e:	486d      	ldr	r0, [pc, #436]	; (8001224 <display7SEG1+0x32c>)
 8001070:	f001 fa63 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	486a      	ldr	r0, [pc, #424]	; (8001224 <display7SEG1+0x32c>)
 800107a:	f001 fa5e 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2120      	movs	r1, #32
 8001082:	4868      	ldr	r0, [pc, #416]	; (8001224 <display7SEG1+0x32c>)
 8001084:	f001 fa59 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2140      	movs	r1, #64	; 0x40
 800108c:	4865      	ldr	r0, [pc, #404]	; (8001224 <display7SEG1+0x32c>)
 800108e:	f001 fa54 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	4863      	ldr	r0, [pc, #396]	; (8001224 <display7SEG1+0x32c>)
 8001098:	f001 fa4f 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	4860      	ldr	r0, [pc, #384]	; (8001224 <display7SEG1+0x32c>)
 80010a4:	f001 fa49 	bl	800253a <HAL_GPIO_WritePin>
		break;
 80010a8:	e0b8      	b.n	800121c <display7SEG1+0x324>
	case 5:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2104      	movs	r1, #4
 80010ae:	485d      	ldr	r0, [pc, #372]	; (8001224 <display7SEG1+0x32c>)
 80010b0:	f001 fa43 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2108      	movs	r1, #8
 80010b8:	485a      	ldr	r0, [pc, #360]	; (8001224 <display7SEG1+0x32c>)
 80010ba:	f001 fa3e 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2110      	movs	r1, #16
 80010c2:	4858      	ldr	r0, [pc, #352]	; (8001224 <display7SEG1+0x32c>)
 80010c4:	f001 fa39 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2120      	movs	r1, #32
 80010cc:	4855      	ldr	r0, [pc, #340]	; (8001224 <display7SEG1+0x32c>)
 80010ce:	f001 fa34 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	4853      	ldr	r0, [pc, #332]	; (8001224 <display7SEG1+0x32c>)
 80010d8:	f001 fa2f 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	4850      	ldr	r0, [pc, #320]	; (8001224 <display7SEG1+0x32c>)
 80010e2:	f001 fa2a 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	484d      	ldr	r0, [pc, #308]	; (8001224 <display7SEG1+0x32c>)
 80010ee:	f001 fa24 	bl	800253a <HAL_GPIO_WritePin>
		break;
 80010f2:	e093      	b.n	800121c <display7SEG1+0x324>
	case 6:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2104      	movs	r1, #4
 80010f8:	484a      	ldr	r0, [pc, #296]	; (8001224 <display7SEG1+0x32c>)
 80010fa:	f001 fa1e 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2108      	movs	r1, #8
 8001102:	4848      	ldr	r0, [pc, #288]	; (8001224 <display7SEG1+0x32c>)
 8001104:	f001 fa19 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2110      	movs	r1, #16
 800110c:	4845      	ldr	r0, [pc, #276]	; (8001224 <display7SEG1+0x32c>)
 800110e:	f001 fa14 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	4843      	ldr	r0, [pc, #268]	; (8001224 <display7SEG1+0x32c>)
 8001118:	f001 fa0f 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4840      	ldr	r0, [pc, #256]	; (8001224 <display7SEG1+0x32c>)
 8001122:	f001 fa0a 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	483e      	ldr	r0, [pc, #248]	; (8001224 <display7SEG1+0x32c>)
 800112c:	f001 fa05 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001136:	483b      	ldr	r0, [pc, #236]	; (8001224 <display7SEG1+0x32c>)
 8001138:	f001 f9ff 	bl	800253a <HAL_GPIO_WritePin>
		break;
 800113c:	e06e      	b.n	800121c <display7SEG1+0x324>
	case 7:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2104      	movs	r1, #4
 8001142:	4838      	ldr	r0, [pc, #224]	; (8001224 <display7SEG1+0x32c>)
 8001144:	f001 f9f9 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2108      	movs	r1, #8
 800114c:	4835      	ldr	r0, [pc, #212]	; (8001224 <display7SEG1+0x32c>)
 800114e:	f001 f9f4 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2110      	movs	r1, #16
 8001156:	4833      	ldr	r0, [pc, #204]	; (8001224 <display7SEG1+0x32c>)
 8001158:	f001 f9ef 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2120      	movs	r1, #32
 8001160:	4830      	ldr	r0, [pc, #192]	; (8001224 <display7SEG1+0x32c>)
 8001162:	f001 f9ea 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2140      	movs	r1, #64	; 0x40
 800116a:	482e      	ldr	r0, [pc, #184]	; (8001224 <display7SEG1+0x32c>)
 800116c:	f001 f9e5 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	482b      	ldr	r0, [pc, #172]	; (8001224 <display7SEG1+0x32c>)
 8001176:	f001 f9e0 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	4828      	ldr	r0, [pc, #160]	; (8001224 <display7SEG1+0x32c>)
 8001182:	f001 f9da 	bl	800253a <HAL_GPIO_WritePin>
		break;
 8001186:	e049      	b.n	800121c <display7SEG1+0x324>
	case 8:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2104      	movs	r1, #4
 800118c:	4825      	ldr	r0, [pc, #148]	; (8001224 <display7SEG1+0x32c>)
 800118e:	f001 f9d4 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2108      	movs	r1, #8
 8001196:	4823      	ldr	r0, [pc, #140]	; (8001224 <display7SEG1+0x32c>)
 8001198:	f001 f9cf 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2110      	movs	r1, #16
 80011a0:	4820      	ldr	r0, [pc, #128]	; (8001224 <display7SEG1+0x32c>)
 80011a2:	f001 f9ca 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2120      	movs	r1, #32
 80011aa:	481e      	ldr	r0, [pc, #120]	; (8001224 <display7SEG1+0x32c>)
 80011ac:	f001 f9c5 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2140      	movs	r1, #64	; 0x40
 80011b4:	481b      	ldr	r0, [pc, #108]	; (8001224 <display7SEG1+0x32c>)
 80011b6:	f001 f9c0 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	4819      	ldr	r0, [pc, #100]	; (8001224 <display7SEG1+0x32c>)
 80011c0:	f001 f9bb 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	4816      	ldr	r0, [pc, #88]	; (8001224 <display7SEG1+0x32c>)
 80011cc:	f001 f9b5 	bl	800253a <HAL_GPIO_WritePin>
		break;
 80011d0:	e024      	b.n	800121c <display7SEG1+0x324>
	case 9:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2104      	movs	r1, #4
 80011d6:	4813      	ldr	r0, [pc, #76]	; (8001224 <display7SEG1+0x32c>)
 80011d8:	f001 f9af 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2108      	movs	r1, #8
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <display7SEG1+0x32c>)
 80011e2:	f001 f9aa 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2110      	movs	r1, #16
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <display7SEG1+0x32c>)
 80011ec:	f001 f9a5 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2120      	movs	r1, #32
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <display7SEG1+0x32c>)
 80011f6:	f001 f9a0 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	4809      	ldr	r0, [pc, #36]	; (8001224 <display7SEG1+0x32c>)
 8001200:	f001 f99b 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <display7SEG1+0x32c>)
 800120a:	f001 f996 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <display7SEG1+0x32c>)
 8001216:	f001 f990 	bl	800253a <HAL_GPIO_WritePin>
		break;
 800121a:	bf00      	nop
	}


}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40010c00 	.word	0x40010c00

08001228 <display7SEG2>:

void display7SEG2(int num){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b09      	cmp	r3, #9
 8001234:	f200 81c9 	bhi.w	80015ca <display7SEG2+0x3a2>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <display7SEG2+0x18>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001269 	.word	0x08001269
 8001244:	080012bf 	.word	0x080012bf
 8001248:	08001315 	.word	0x08001315
 800124c:	0800136b 	.word	0x0800136b
 8001250:	080013c1 	.word	0x080013c1
 8001254:	08001417 	.word	0x08001417
 8001258:	0800146d 	.word	0x0800146d
 800125c:	080014c3 	.word	0x080014c3
 8001260:	08001519 	.word	0x08001519
 8001264:	08001575 	.word	0x08001575
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126e:	48c0      	ldr	r0, [pc, #768]	; (8001570 <display7SEG2+0x348>)
 8001270:	f001 f963 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127a:	48bd      	ldr	r0, [pc, #756]	; (8001570 <display7SEG2+0x348>)
 800127c:	f001 f95d 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001286:	48ba      	ldr	r0, [pc, #744]	; (8001570 <display7SEG2+0x348>)
 8001288:	f001 f957 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001292:	48b7      	ldr	r0, [pc, #732]	; (8001570 <display7SEG2+0x348>)
 8001294:	f001 f951 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129e:	48b4      	ldr	r0, [pc, #720]	; (8001570 <display7SEG2+0x348>)
 80012a0:	f001 f94b 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012aa:	48b1      	ldr	r0, [pc, #708]	; (8001570 <display7SEG2+0x348>)
 80012ac:	f001 f945 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b6:	48ae      	ldr	r0, [pc, #696]	; (8001570 <display7SEG2+0x348>)
 80012b8:	f001 f93f 	bl	800253a <HAL_GPIO_WritePin>
		break;
 80012bc:	e185      	b.n	80015ca <display7SEG2+0x3a2>
	case 1:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c4:	48aa      	ldr	r0, [pc, #680]	; (8001570 <display7SEG2+0x348>)
 80012c6:	f001 f938 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d0:	48a7      	ldr	r0, [pc, #668]	; (8001570 <display7SEG2+0x348>)
 80012d2:	f001 f932 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012dc:	48a4      	ldr	r0, [pc, #656]	; (8001570 <display7SEG2+0x348>)
 80012de:	f001 f92c 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e8:	48a1      	ldr	r0, [pc, #644]	; (8001570 <display7SEG2+0x348>)
 80012ea:	f001 f926 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f4:	489e      	ldr	r0, [pc, #632]	; (8001570 <display7SEG2+0x348>)
 80012f6:	f001 f920 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001300:	489b      	ldr	r0, [pc, #620]	; (8001570 <display7SEG2+0x348>)
 8001302:	f001 f91a 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130c:	4898      	ldr	r0, [pc, #608]	; (8001570 <display7SEG2+0x348>)
 800130e:	f001 f914 	bl	800253a <HAL_GPIO_WritePin>
		break;
 8001312:	e15a      	b.n	80015ca <display7SEG2+0x3a2>
	case 2:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131a:	4895      	ldr	r0, [pc, #596]	; (8001570 <display7SEG2+0x348>)
 800131c:	f001 f90d 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001326:	4892      	ldr	r0, [pc, #584]	; (8001570 <display7SEG2+0x348>)
 8001328:	f001 f907 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001332:	488f      	ldr	r0, [pc, #572]	; (8001570 <display7SEG2+0x348>)
 8001334:	f001 f901 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133e:	488c      	ldr	r0, [pc, #560]	; (8001570 <display7SEG2+0x348>)
 8001340:	f001 f8fb 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134a:	4889      	ldr	r0, [pc, #548]	; (8001570 <display7SEG2+0x348>)
 800134c:	f001 f8f5 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001356:	4886      	ldr	r0, [pc, #536]	; (8001570 <display7SEG2+0x348>)
 8001358:	f001 f8ef 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001362:	4883      	ldr	r0, [pc, #524]	; (8001570 <display7SEG2+0x348>)
 8001364:	f001 f8e9 	bl	800253a <HAL_GPIO_WritePin>
		break;
 8001368:	e12f      	b.n	80015ca <display7SEG2+0x3a2>
	case 3:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	487f      	ldr	r0, [pc, #508]	; (8001570 <display7SEG2+0x348>)
 8001372:	f001 f8e2 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800137c:	487c      	ldr	r0, [pc, #496]	; (8001570 <display7SEG2+0x348>)
 800137e:	f001 f8dc 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001388:	4879      	ldr	r0, [pc, #484]	; (8001570 <display7SEG2+0x348>)
 800138a:	f001 f8d6 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001394:	4876      	ldr	r0, [pc, #472]	; (8001570 <display7SEG2+0x348>)
 8001396:	f001 f8d0 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a0:	4873      	ldr	r0, [pc, #460]	; (8001570 <display7SEG2+0x348>)
 80013a2:	f001 f8ca 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ac:	4870      	ldr	r0, [pc, #448]	; (8001570 <display7SEG2+0x348>)
 80013ae:	f001 f8c4 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	486d      	ldr	r0, [pc, #436]	; (8001570 <display7SEG2+0x348>)
 80013ba:	f001 f8be 	bl	800253a <HAL_GPIO_WritePin>
		break;
 80013be:	e104      	b.n	80015ca <display7SEG2+0x3a2>
	case 4:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c6:	486a      	ldr	r0, [pc, #424]	; (8001570 <display7SEG2+0x348>)
 80013c8:	f001 f8b7 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d2:	4867      	ldr	r0, [pc, #412]	; (8001570 <display7SEG2+0x348>)
 80013d4:	f001 f8b1 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013de:	4864      	ldr	r0, [pc, #400]	; (8001570 <display7SEG2+0x348>)
 80013e0:	f001 f8ab 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ea:	4861      	ldr	r0, [pc, #388]	; (8001570 <display7SEG2+0x348>)
 80013ec:	f001 f8a5 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	485e      	ldr	r0, [pc, #376]	; (8001570 <display7SEG2+0x348>)
 80013f8:	f001 f89f 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001402:	485b      	ldr	r0, [pc, #364]	; (8001570 <display7SEG2+0x348>)
 8001404:	f001 f899 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140e:	4858      	ldr	r0, [pc, #352]	; (8001570 <display7SEG2+0x348>)
 8001410:	f001 f893 	bl	800253a <HAL_GPIO_WritePin>
		break;
 8001414:	e0d9      	b.n	80015ca <display7SEG2+0x3a2>
	case 5:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141c:	4854      	ldr	r0, [pc, #336]	; (8001570 <display7SEG2+0x348>)
 800141e:	f001 f88c 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001428:	4851      	ldr	r0, [pc, #324]	; (8001570 <display7SEG2+0x348>)
 800142a:	f001 f886 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001434:	484e      	ldr	r0, [pc, #312]	; (8001570 <display7SEG2+0x348>)
 8001436:	f001 f880 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001440:	484b      	ldr	r0, [pc, #300]	; (8001570 <display7SEG2+0x348>)
 8001442:	f001 f87a 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144c:	4848      	ldr	r0, [pc, #288]	; (8001570 <display7SEG2+0x348>)
 800144e:	f001 f874 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001458:	4845      	ldr	r0, [pc, #276]	; (8001570 <display7SEG2+0x348>)
 800145a:	f001 f86e 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001464:	4842      	ldr	r0, [pc, #264]	; (8001570 <display7SEG2+0x348>)
 8001466:	f001 f868 	bl	800253a <HAL_GPIO_WritePin>
		break;
 800146a:	e0ae      	b.n	80015ca <display7SEG2+0x3a2>
	case 6:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001472:	483f      	ldr	r0, [pc, #252]	; (8001570 <display7SEG2+0x348>)
 8001474:	f001 f861 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147e:	483c      	ldr	r0, [pc, #240]	; (8001570 <display7SEG2+0x348>)
 8001480:	f001 f85b 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148a:	4839      	ldr	r0, [pc, #228]	; (8001570 <display7SEG2+0x348>)
 800148c:	f001 f855 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001496:	4836      	ldr	r0, [pc, #216]	; (8001570 <display7SEG2+0x348>)
 8001498:	f001 f84f 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	4833      	ldr	r0, [pc, #204]	; (8001570 <display7SEG2+0x348>)
 80014a4:	f001 f849 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ae:	4830      	ldr	r0, [pc, #192]	; (8001570 <display7SEG2+0x348>)
 80014b0:	f001 f843 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ba:	482d      	ldr	r0, [pc, #180]	; (8001570 <display7SEG2+0x348>)
 80014bc:	f001 f83d 	bl	800253a <HAL_GPIO_WritePin>
		break;
 80014c0:	e083      	b.n	80015ca <display7SEG2+0x3a2>
	case 7:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c8:	4829      	ldr	r0, [pc, #164]	; (8001570 <display7SEG2+0x348>)
 80014ca:	f001 f836 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d4:	4826      	ldr	r0, [pc, #152]	; (8001570 <display7SEG2+0x348>)
 80014d6:	f001 f830 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e0:	4823      	ldr	r0, [pc, #140]	; (8001570 <display7SEG2+0x348>)
 80014e2:	f001 f82a 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ec:	4820      	ldr	r0, [pc, #128]	; (8001570 <display7SEG2+0x348>)
 80014ee:	f001 f824 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f8:	481d      	ldr	r0, [pc, #116]	; (8001570 <display7SEG2+0x348>)
 80014fa:	f001 f81e 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001504:	481a      	ldr	r0, [pc, #104]	; (8001570 <display7SEG2+0x348>)
 8001506:	f001 f818 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001510:	4817      	ldr	r0, [pc, #92]	; (8001570 <display7SEG2+0x348>)
 8001512:	f001 f812 	bl	800253a <HAL_GPIO_WritePin>
		break;
 8001516:	e058      	b.n	80015ca <display7SEG2+0x3a2>
	case 8:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <display7SEG2+0x348>)
 8001520:	f001 f80b 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152a:	4811      	ldr	r0, [pc, #68]	; (8001570 <display7SEG2+0x348>)
 800152c:	f001 f805 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <display7SEG2+0x348>)
 8001538:	f000 ffff 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001542:	480b      	ldr	r0, [pc, #44]	; (8001570 <display7SEG2+0x348>)
 8001544:	f000 fff9 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <display7SEG2+0x348>)
 8001550:	f000 fff3 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <display7SEG2+0x348>)
 800155c:	f000 ffed 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001566:	4802      	ldr	r0, [pc, #8]	; (8001570 <display7SEG2+0x348>)
 8001568:	f000 ffe7 	bl	800253a <HAL_GPIO_WritePin>
		break;
 800156c:	e02d      	b.n	80015ca <display7SEG2+0x3a2>
 800156e:	bf00      	nop
 8001570:	40010c00 	.word	0x40010c00
	case 9:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157a:	4816      	ldr	r0, [pc, #88]	; (80015d4 <display7SEG2+0x3ac>)
 800157c:	f000 ffdd 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <display7SEG2+0x3ac>)
 8001588:	f000 ffd7 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001592:	4810      	ldr	r0, [pc, #64]	; (80015d4 <display7SEG2+0x3ac>)
 8001594:	f000 ffd1 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <display7SEG2+0x3ac>)
 80015a0:	f000 ffcb 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <display7SEG2+0x3ac>)
 80015ac:	f000 ffc5 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <display7SEG2+0x3ac>)
 80015b8:	f000 ffbf 	bl	800253a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <display7SEG2+0x3ac>)
 80015c4:	f000 ffb9 	bl	800253a <HAL_GPIO_WritePin>
		break;
 80015c8:	bf00      	nop
	}
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40010c00 	.word	0x40010c00

080015d8 <update7SEG1>:

void update7SEG1( int index, int time ) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
 switch ( index ) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <update7SEG1+0x18>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d017      	beq.n	800161e <update7SEG1+0x46>
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,  GPIO_PIN_SET);
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,  GPIO_PIN_RESET);
		 display7SEG1(time%10);
		 break ;
	 default :
		 break ;
 80015ee:	e032      	b.n	8001656 <update7SEG1+0x7e>
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,  GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f6:	481a      	ldr	r0, [pc, #104]	; (8001660 <update7SEG1+0x88>)
 80015f8:	f000 ff9f 	bl	800253a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,  GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001602:	4817      	ldr	r0, [pc, #92]	; (8001660 <update7SEG1+0x88>)
 8001604:	f000 ff99 	bl	800253a <HAL_GPIO_WritePin>
		 display7SEG1(time/10);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <update7SEG1+0x8c>)
 800160c:	fb82 1203 	smull	r1, r2, r2, r3
 8001610:	1092      	asrs	r2, r2, #2
 8001612:	17db      	asrs	r3, r3, #31
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fc6e 	bl	8000ef8 <display7SEG1>
		 break ;
 800161c:	e01b      	b.n	8001656 <update7SEG1+0x7e>
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,  GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001624:	480e      	ldr	r0, [pc, #56]	; (8001660 <update7SEG1+0x88>)
 8001626:	f000 ff88 	bl	800253a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,  GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <update7SEG1+0x88>)
 8001632:	f000 ff82 	bl	800253a <HAL_GPIO_WritePin>
		 display7SEG1(time%10);
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <update7SEG1+0x8c>)
 800163a:	fb83 1302 	smull	r1, r3, r3, r2
 800163e:	1099      	asrs	r1, r3, #2
 8001640:	17d3      	asrs	r3, r2, #31
 8001642:	1ac9      	subs	r1, r1, r3
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	1ad1      	subs	r1, r2, r3
 800164e:	4608      	mov	r0, r1
 8001650:	f7ff fc52 	bl	8000ef8 <display7SEG1>
		 break ;
 8001654:	bf00      	nop
	 }
 }
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010800 	.word	0x40010800
 8001664:	66666667 	.word	0x66666667

08001668 <update7SEG2>:

void update7SEG2( int index, int time ) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
 switch ( index ){
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <update7SEG2+0x18>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d017      	beq.n	80016ae <update7SEG2+0x46>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,  GPIO_PIN_SET);
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,  GPIO_PIN_RESET);
		 display7SEG2(time%10);
		 break ;
	 default :
		 break ;
 800167e:	e032      	b.n	80016e6 <update7SEG2+0x7e>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,  GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001686:	481a      	ldr	r0, [pc, #104]	; (80016f0 <update7SEG2+0x88>)
 8001688:	f000 ff57 	bl	800253a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,  GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001692:	4817      	ldr	r0, [pc, #92]	; (80016f0 <update7SEG2+0x88>)
 8001694:	f000 ff51 	bl	800253a <HAL_GPIO_WritePin>
		 display7SEG2(time/10);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <update7SEG2+0x8c>)
 800169c:	fb82 1203 	smull	r1, r2, r2, r3
 80016a0:	1092      	asrs	r2, r2, #2
 80016a2:	17db      	asrs	r3, r3, #31
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fdbe 	bl	8001228 <display7SEG2>
		 break ;
 80016ac:	e01b      	b.n	80016e6 <update7SEG2+0x7e>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,  GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b4:	480e      	ldr	r0, [pc, #56]	; (80016f0 <update7SEG2+0x88>)
 80016b6:	f000 ff40 	bl	800253a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,  GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <update7SEG2+0x88>)
 80016c2:	f000 ff3a 	bl	800253a <HAL_GPIO_WritePin>
		 display7SEG2(time%10);
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <update7SEG2+0x8c>)
 80016ca:	fb83 1302 	smull	r1, r3, r3, r2
 80016ce:	1099      	asrs	r1, r3, #2
 80016d0:	17d3      	asrs	r3, r2, #31
 80016d2:	1ac9      	subs	r1, r1, r3
 80016d4:	460b      	mov	r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	1ad1      	subs	r1, r2, r3
 80016de:	4608      	mov	r0, r1
 80016e0:	f7ff fda2 	bl	8001228 <display7SEG2>
		 break ;
 80016e4:	bf00      	nop
	 }
 }
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010800 	.word	0x40010800
 80016f4:	66666667 	.word	0x66666667

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fc:	f000 fc1c 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001700:	f000 f83e 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001704:	f000 f8c4 	bl	8001890 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001708:	f000 f876 	bl	80017f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <main+0x74>)
 800170e:	f001 fb7d 	bl	8002e0c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
setTimer0(1000);
 8001712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001716:	f000 f9b3 	bl	8001a80 <setTimer0>
setTimer1(500);
 800171a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800171e:	f000 f9c5 	bl	8001aac <setTimer1>
setTimer2(250);
 8001722:	20fa      	movs	r0, #250	; 0xfa
 8001724:	f000 f9d8 	bl	8001ad8 <setTimer2>
HAL_GPIO_WritePin(WARNING_GPIO_Port, WARNING_Pin, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172e:	4810      	ldr	r0, [pc, #64]	; (8001770 <main+0x78>)
 8001730:	f000 ff03 	bl	800253a <HAL_GPIO_WritePin>
  while (1)
  {
	  if(flag1Sec == 1){
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <main+0x7c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <main+0x50>
		  fsm_for_input_processing();
 800173c:	f7fe fd4c 	bl	80001d8 <fsm_for_input_processing>
		  setTimer0(1000);
 8001740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001744:	f000 f99c 	bl	8001a80 <setTimer0>
	  }
	  if(flagHalfSec==1){
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <main+0x80>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <main+0x64>
		  fsm_for_input_processing ();
 8001750:	f7fe fd42 	bl	80001d8 <fsm_for_input_processing>
		  setTimer1(1000);
 8001754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001758:	f000 f9a8 	bl	8001aac <setTimer1>
	  }
	  if(flagAuto == 1){
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <main+0x84>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d1e7      	bne.n	8001734 <main+0x3c>
		  setTimer2(250);
 8001764:	20fa      	movs	r0, #250	; 0xfa
 8001766:	f000 f9b7 	bl	8001ad8 <setTimer2>
	  if(flag1Sec == 1){
 800176a:	e7e3      	b.n	8001734 <main+0x3c>
 800176c:	20000080 	.word	0x20000080
 8001770:	40010800 	.word	0x40010800
 8001774:	20000068 	.word	0x20000068
 8001778:	20000064 	.word	0x20000064
 800177c:	2000006c 	.word	0x2000006c

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b090      	sub	sp, #64	; 0x40
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	2228      	movs	r2, #40	; 0x28
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f001 fef4 	bl	800357c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a6:	2301      	movs	r3, #1
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017aa:	2310      	movs	r3, #16
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fef0 	bl	800259c <HAL_RCC_OscConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80017c2:	f000 f8c9 	bl	8001958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c6:	230f      	movs	r3, #15
 80017c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 f95c 	bl	8002a9c <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017ea:	f000 f8b5 	bl	8001958 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3740      	adds	r7, #64	; 0x40
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	463b      	mov	r3, r7
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_TIM2_Init+0x94>)
 8001816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800181a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM2_Init+0x94>)
 800181e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001822:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_TIM2_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_TIM2_Init+0x94>)
 800182c:	2209      	movs	r2, #9
 800182e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_TIM2_Init+0x94>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM2_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_TIM2_Init+0x94>)
 800183e:	f001 fa95 	bl	8002d6c <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001848:	f000 f886 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_TIM2_Init+0x94>)
 800185a:	f001 fc2b 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001864:	f000 f878 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM2_Init+0x94>)
 8001876:	f001 fdf3 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 f86a 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000080 	.word	0x20000080

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_GPIO_Init+0xbc>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a28      	ldr	r2, [pc, #160]	; (800194c <MX_GPIO_Init+0xbc>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <MX_GPIO_Init+0xbc>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <MX_GPIO_Init+0xbc>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a22      	ldr	r2, [pc, #136]	; (800194c <MX_GPIO_Init+0xbc>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <MX_GPIO_Init+0xbc>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|amber1_Pin|green1_Pin|red2_Pin
 80018d4:	2200      	movs	r2, #0
 80018d6:	f64b 413f 	movw	r1, #48191	; 0xbc3f
 80018da:	481d      	ldr	r0, [pc, #116]	; (8001950 <MX_GPIO_Init+0xc0>)
 80018dc:	f000 fe2d 	bl	800253a <HAL_GPIO_WritePin>
                          |amber2_Pin|green2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|WARNING_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin
 80018e0:	2200      	movs	r2, #0
 80018e2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <MX_GPIO_Init+0xc4>)
 80018e8:	f000 fe27 	bl	800253a <HAL_GPIO_WritePin>
                          |SEG1_6_Pin|SEG2_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin amber1_Pin green1_Pin red2_Pin
                           amber2_Pin green2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin WARNING_Pin */
  GPIO_InitStruct.Pin = red1_Pin|amber1_Pin|green1_Pin|red2_Pin
 80018ec:	f64b 433f 	movw	r3, #48191	; 0xbc3f
 80018f0:	60bb      	str	r3, [r7, #8]
                          |amber2_Pin|green2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|WARNING_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2302      	movs	r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4619      	mov	r1, r3
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <MX_GPIO_Init+0xc0>)
 8001906:	f000 fc87 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin button4_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin|button4_Pin;
 800190a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800190e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	4619      	mov	r1, r3
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_GPIO_Init+0xc0>)
 8001920:	f000 fc7a 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_0_Pin SEG2_1_Pin SEG2_2_Pin SEG2_3_Pin
                           SEG2_4_Pin SEG2_5_Pin SEG2_6_Pin SEG1_1_Pin
                           SEG1_2_Pin SEG1_3_Pin SEG1_4_Pin SEG1_5_Pin
                           SEG1_6_Pin SEG2_0_Pin */
  GPIO_InitStruct.Pin = SEG1_0_Pin|SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin
 8001924:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001928:	60bb      	str	r3, [r7, #8]
                          |SEG2_4_Pin|SEG2_5_Pin|SEG2_6_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin|SEG1_4_Pin|SEG1_5_Pin
                          |SEG1_6_Pin|SEG2_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2302      	movs	r3, #2
 8001934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_GPIO_Init+0xc4>)
 800193e:	f000 fc6b 	bl	8002218 <HAL_GPIO_Init>

}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001960:	e7fe      	b.n	8001960 <Error_Handler+0x8>
	...

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_MspInit+0x5c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x5c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_MspInit+0x60>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_MspInit+0x60>)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d8:	d113      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_TIM_Base_MspInit+0x44>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <HAL_TIM_Base_MspInit+0x44>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_TIM_Base_MspInit+0x44>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	201c      	movs	r0, #28
 80019f8:	f000 fbd7 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019fc:	201c      	movs	r0, #28
 80019fe:	f000 fbf0 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <NMI_Handler+0x4>

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a56:	f000 fab5 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <TIM2_IRQHandler+0x10>)
 8001a66:	f001 fa1d 	bl	8002ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000080 	.word	0x20000080

08001a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <setTimer0>:
int flagAuto = 0;
int timer0_counter = 0;
int timer1_counter = 0;
int timer2_counter = 0;
const int TIMER_CYCLE = 10;
void setTimer0(int duration){
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	 timer0_counter = duration / TIMER_CYCLE ;
 8001a88:	220a      	movs	r2, #10
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <setTimer0+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
	 flag1Sec = 0;
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <setTimer0+0x28>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000070 	.word	0x20000070
 8001aa8:	20000068 	.word	0x20000068

08001aac <setTimer1>:
void setTimer1(int duration){
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	 timer1_counter = duration/ TIMER_CYCLE ;
 8001ab4:	220a      	movs	r2, #10
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <setTimer1+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
	 flagHalfSec = 0;
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <setTimer1+0x28>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000074 	.word	0x20000074
 8001ad4:	20000064 	.word	0x20000064

08001ad8 <setTimer2>:
void setTimer2(int duration){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8001ae0:	220a      	movs	r2, #10
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <setTimer2+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
	flagAuto = 0;
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <setTimer2+0x28>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000078 	.word	0x20000078
 8001b00:	2000006c 	.word	0x2000006c

08001b04 <timer_run>:
void timer_run() {
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	 if( timer0_counter > 0) {
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <timer_run+0x6c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	dd0b      	ble.n	8001b28 <timer_run+0x24>
		 timer0_counter--;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <timer_run+0x6c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <timer_run+0x6c>)
 8001b18:	6013      	str	r3, [r2, #0]
		 if( timer0_counter == 0) flag1Sec = 1;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <timer_run+0x6c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <timer_run+0x24>
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <timer_run+0x70>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
	 }

	 if( timer1_counter > 0) {
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <timer_run+0x74>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	dd0b      	ble.n	8001b48 <timer_run+0x44>
		 timer1_counter--;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <timer_run+0x74>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <timer_run+0x74>)
 8001b38:	6013      	str	r3, [r2, #0]
		 if( timer1_counter == 0) flagHalfSec = 1;
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <timer_run+0x74>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <timer_run+0x44>
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <timer_run+0x78>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
	 }
	 if(timer2_counter>0){
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <timer_run+0x7c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	dd0b      	ble.n	8001b68 <timer_run+0x64>
		 timer2_counter--;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <timer_run+0x7c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <timer_run+0x7c>)
 8001b58:	6013      	str	r3, [r2, #0]
		 if(timer2_counter == 0) flagAuto = 1;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <timer_run+0x7c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <timer_run+0x64>
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <timer_run+0x80>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
	 }

 }
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	20000070 	.word	0x20000070
 8001b74:	20000068 	.word	0x20000068
 8001b78:	20000074 	.word	0x20000074
 8001b7c:	20000064 	.word	0x20000064
 8001b80:	20000078 	.word	0x20000078
 8001b84:	2000006c 	.word	0x2000006c

08001b88 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef* htim ) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
		button_reading();
 8001b90:	f7ff f916 	bl	8000dc0 <button_reading>
		timer_run();
 8001b94:	f7ff ffb6 	bl	8001b04 <timer_run>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <red1Control>:
int currentCount1 = 5; //time for seg1
int currentCount2 = 3; //time for seg2
enum trafficLightState {RED1_GREEN2, RED1_AMBER2, GREEN1_RED2, AMBER1_RED2};
enum trafficLightState currentStateLight = RED1_GREEN2;
enum trafficLightState nextStateLight = RED1_GREEN2;
void red1Control(){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <red1Control+0x28>)
 8001baa:	f000 fcc6 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(amber1_GPIO_Port, amber1_Pin, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <red1Control+0x28>)
 8001bb4:	f000 fcc1 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2104      	movs	r1, #4
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <red1Control+0x28>)
 8001bbe:	f000 fcbc 	bl	800253a <HAL_GPIO_WritePin>
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40010800 	.word	0x40010800

08001bcc <red2Control>:
void red2Control(){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	4807      	ldr	r0, [pc, #28]	; (8001bf4 <red2Control+0x28>)
 8001bd6:	f000 fcb0 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(amber2_GPIO_Port, amber2_Pin, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2110      	movs	r1, #16
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <red2Control+0x28>)
 8001be0:	f000 fcab 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2120      	movs	r1, #32
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <red2Control+0x28>)
 8001bea:	f000 fca6 	bl	800253a <HAL_GPIO_WritePin>
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40010800 	.word	0x40010800

08001bf8 <amber1Control>:
void amber1Control(){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4807      	ldr	r0, [pc, #28]	; (8001c20 <amber1Control+0x28>)
 8001c02:	f000 fc9a 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(amber1_GPIO_Port, amber1_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2102      	movs	r1, #2
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <amber1Control+0x28>)
 8001c0c:	f000 fc95 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	2104      	movs	r1, #4
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <amber1Control+0x28>)
 8001c16:	f000 fc90 	bl	800253a <HAL_GPIO_WritePin>
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40010800 	.word	0x40010800

08001c24 <amber2Control>:
void amber2Control(){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <amber2Control+0x28>)
 8001c2e:	f000 fc84 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(amber2_GPIO_Port, amber2_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2110      	movs	r1, #16
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <amber2Control+0x28>)
 8001c38:	f000 fc7f 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2120      	movs	r1, #32
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <amber2Control+0x28>)
 8001c42:	f000 fc7a 	bl	800253a <HAL_GPIO_WritePin>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40010800 	.word	0x40010800

08001c50 <green1Control>:
void green1Control(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2101      	movs	r1, #1
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <green1Control+0x28>)
 8001c5a:	f000 fc6e 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(amber1_GPIO_Port, amber1_Pin, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2102      	movs	r1, #2
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <green1Control+0x28>)
 8001c64:	f000 fc69 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <green1Control+0x28>)
 8001c6e:	f000 fc64 	bl	800253a <HAL_GPIO_WritePin>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40010800 	.word	0x40010800

08001c7c <green2Control>:
void green2Control(){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	2108      	movs	r1, #8
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <green2Control+0x28>)
 8001c86:	f000 fc58 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(amber2_GPIO_Port, amber2_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <green2Control+0x28>)
 8001c90:	f000 fc53 	bl	800253a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2120      	movs	r1, #32
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <green2Control+0x28>)
 8001c9a:	f000 fc4e 	bl	800253a <HAL_GPIO_WritePin>
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <trafficLightRun>:

void trafficLightRun(int flagHalfSec, int flag1Sec){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
	currentStateLight = nextStateLight;
 8001cb2:	4b87      	ldr	r3, [pc, #540]	; (8001ed0 <trafficLightRun+0x228>)
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	4b87      	ldr	r3, [pc, #540]	; (8001ed4 <trafficLightRun+0x22c>)
 8001cb8:	701a      	strb	r2, [r3, #0]
	switch(currentStateLight){
 8001cba:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <trafficLightRun+0x22c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	f200 8101 	bhi.w	8001ec6 <trafficLightRun+0x21e>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <trafficLightRun+0x24>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001d53 	.word	0x08001d53
 8001cd4:	08001dcd 	.word	0x08001dcd
 8001cd8:	08001e41 	.word	0x08001e41
		case RED1_GREEN2:
			red1Control();
 8001cdc:	f7ff ff60 	bl	8001ba0 <red1Control>
			green2Control();
 8001ce0:	f7ff ffcc 	bl	8001c7c <green2Control>
			if(flagHalfSec){
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <trafficLightRun+0x5a>
				update7SEG1(0,currentCount1);
 8001cea:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <trafficLightRun+0x230>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fc71 	bl	80015d8 <update7SEG1>
				update7SEG2(0,currentCount2);
 8001cf6:	4b79      	ldr	r3, [pc, #484]	; (8001edc <trafficLightRun+0x234>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fcb3 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d015      	beq.n	8001d34 <trafficLightRun+0x8c>
				update7SEG1(1,currentCount1);
 8001d08:	4b73      	ldr	r3, [pc, #460]	; (8001ed8 <trafficLightRun+0x230>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7ff fc62 	bl	80015d8 <update7SEG1>
				update7SEG2(1,currentCount2);
 8001d14:	4b71      	ldr	r3, [pc, #452]	; (8001edc <trafficLightRun+0x234>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff fca4 	bl	8001668 <update7SEG2>
				currentCount1--;
 8001d20:	4b6d      	ldr	r3, [pc, #436]	; (8001ed8 <trafficLightRun+0x230>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	4a6c      	ldr	r2, [pc, #432]	; (8001ed8 <trafficLightRun+0x230>)
 8001d28:	6013      	str	r3, [r2, #0]
				currentCount2--;
 8001d2a:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <trafficLightRun+0x234>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <trafficLightRun+0x234>)
 8001d32:	6013      	str	r3, [r2, #0]
			}
			if(currentCount1 == timeAmber){
 8001d34:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <trafficLightRun+0x230>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b69      	ldr	r3, [pc, #420]	; (8001ee0 <trafficLightRun+0x238>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 80bb 	bne.w	8001eb8 <trafficLightRun+0x210>
				nextStateLight = RED1_AMBER2;
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <trafficLightRun+0x228>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
				currentCount2 = timeAmber;
 8001d48:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <trafficLightRun+0x238>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a63      	ldr	r2, [pc, #396]	; (8001edc <trafficLightRun+0x234>)
 8001d4e:	6013      	str	r3, [r2, #0]
			}

			break;
 8001d50:	e0b2      	b.n	8001eb8 <trafficLightRun+0x210>
		case RED1_AMBER2:
			red1Control();
 8001d52:	f7ff ff25 	bl	8001ba0 <red1Control>
			amber2Control();
 8001d56:	f7ff ff65 	bl	8001c24 <amber2Control>
			if(flagHalfSec){
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <trafficLightRun+0xd0>
				update7SEG1(0,currentCount1);
 8001d60:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <trafficLightRun+0x230>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fc36 	bl	80015d8 <update7SEG1>
				update7SEG2(0,currentCount2);
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	; (8001edc <trafficLightRun+0x234>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fc78 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d015      	beq.n	8001daa <trafficLightRun+0x102>
				update7SEG1(1,currentCount1);
 8001d7e:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <trafficLightRun+0x230>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff fc27 	bl	80015d8 <update7SEG1>
				update7SEG2(1,currentCount2);
 8001d8a:	4b54      	ldr	r3, [pc, #336]	; (8001edc <trafficLightRun+0x234>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7ff fc69 	bl	8001668 <update7SEG2>
				currentCount1--;
 8001d96:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <trafficLightRun+0x230>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <trafficLightRun+0x230>)
 8001d9e:	6013      	str	r3, [r2, #0]
				currentCount2--;
 8001da0:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <trafficLightRun+0x234>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <trafficLightRun+0x234>)
 8001da8:	6013      	str	r3, [r2, #0]
			}
			if(currentCount1<=0){
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <trafficLightRun+0x230>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f300 8084 	bgt.w	8001ebc <trafficLightRun+0x214>
				nextStateLight = GREEN1_RED2;
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <trafficLightRun+0x228>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
				currentCount1 = timeGreen;
 8001dba:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <trafficLightRun+0x23c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a46      	ldr	r2, [pc, #280]	; (8001ed8 <trafficLightRun+0x230>)
 8001dc0:	6013      	str	r3, [r2, #0]
				currentCount2 = timeRed;
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <trafficLightRun+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a45      	ldr	r2, [pc, #276]	; (8001edc <trafficLightRun+0x234>)
 8001dc8:	6013      	str	r3, [r2, #0]
			}

			break;
 8001dca:	e077      	b.n	8001ebc <trafficLightRun+0x214>
		case GREEN1_RED2:
			red2Control();
 8001dcc:	f7ff fefe 	bl	8001bcc <red2Control>
			green1Control();
 8001dd0:	f7ff ff3e 	bl	8001c50 <green1Control>
			if(flagHalfSec){
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <trafficLightRun+0x14a>
				update7SEG1(0,currentCount1);
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <trafficLightRun+0x230>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4619      	mov	r1, r3
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fbf9 	bl	80015d8 <update7SEG1>
				update7SEG2(0,currentCount2);
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <trafficLightRun+0x234>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4619      	mov	r1, r3
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fc3b 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <trafficLightRun+0x17c>
				update7SEG1(1,currentCount1);
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <trafficLightRun+0x230>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7ff fbea 	bl	80015d8 <update7SEG1>
				update7SEG2(1,currentCount2);
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <trafficLightRun+0x234>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff fc2c 	bl	8001668 <update7SEG2>
				currentCount1--;
 8001e10:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <trafficLightRun+0x230>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	4a30      	ldr	r2, [pc, #192]	; (8001ed8 <trafficLightRun+0x230>)
 8001e18:	6013      	str	r3, [r2, #0]
				currentCount2--;
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <trafficLightRun+0x234>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	4a2e      	ldr	r2, [pc, #184]	; (8001edc <trafficLightRun+0x234>)
 8001e22:	6013      	str	r3, [r2, #0]
			}
			if(currentCount2== (timeAmber)){
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <trafficLightRun+0x234>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <trafficLightRun+0x238>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d147      	bne.n	8001ec0 <trafficLightRun+0x218>
				nextStateLight = AMBER1_RED2;
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <trafficLightRun+0x228>)
 8001e32:	2203      	movs	r2, #3
 8001e34:	701a      	strb	r2, [r3, #0]
				currentCount1 = timeAmber;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <trafficLightRun+0x238>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <trafficLightRun+0x230>)
 8001e3c:	6013      	str	r3, [r2, #0]
			}
			break;
 8001e3e:	e03f      	b.n	8001ec0 <trafficLightRun+0x218>
		case AMBER1_RED2:
			red2Control();
 8001e40:	f7ff fec4 	bl	8001bcc <red2Control>
			amber1Control();
 8001e44:	f7ff fed8 	bl	8001bf8 <amber1Control>
			if(flagHalfSec){
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <trafficLightRun+0x1be>
				update7SEG1(0,currentCount1);
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <trafficLightRun+0x230>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fbbf 	bl	80015d8 <update7SEG1>
				update7SEG2(0,currentCount2);
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <trafficLightRun+0x234>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fc01 	bl	8001668 <update7SEG2>
			}
			if(flag1Sec) {
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <trafficLightRun+0x1f0>
				update7SEG1(1,currentCount1);
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <trafficLightRun+0x230>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff fbb0 	bl	80015d8 <update7SEG1>
				update7SEG2(1,currentCount2);
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <trafficLightRun+0x234>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fbf2 	bl	8001668 <update7SEG2>
				currentCount1--;
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <trafficLightRun+0x230>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <trafficLightRun+0x230>)
 8001e8c:	6013      	str	r3, [r2, #0]
				currentCount2--;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <trafficLightRun+0x234>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <trafficLightRun+0x234>)
 8001e96:	6013      	str	r3, [r2, #0]
			}
			if(currentCount1==0){
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <trafficLightRun+0x230>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d111      	bne.n	8001ec4 <trafficLightRun+0x21c>
				nextStateLight = RED1_GREEN2;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <trafficLightRun+0x228>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
				currentCount1 = timeRed;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <trafficLightRun+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <trafficLightRun+0x230>)
 8001eac:	6013      	str	r3, [r2, #0]
				currentCount2 = timeGreen;
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <trafficLightRun+0x23c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <trafficLightRun+0x234>)
 8001eb4:	6013      	str	r3, [r2, #0]
			}
			break;
 8001eb6:	e005      	b.n	8001ec4 <trafficLightRun+0x21c>
			break;
 8001eb8:	bf00      	nop
 8001eba:	e004      	b.n	8001ec6 <trafficLightRun+0x21e>
			break;
 8001ebc:	bf00      	nop
 8001ebe:	e002      	b.n	8001ec6 <trafficLightRun+0x21e>
			break;
 8001ec0:	bf00      	nop
 8001ec2:	e000      	b.n	8001ec6 <trafficLightRun+0x21e>
			break;
 8001ec4:	bf00      	nop

	}

}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000007d 	.word	0x2000007d
 8001ed4:	2000007c 	.word	0x2000007c
 8001ed8:	2000001c 	.word	0x2000001c
 8001edc:	20000020 	.word	0x20000020
 8001ee0:	20000010 	.word	0x20000010
 8001ee4:	20000014 	.word	0x20000014
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	; (8001f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	; (8001f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f12:	f7ff fdaf 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f16:	f001 fb0d 	bl	8003534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f1a:	f7ff fbed 	bl	80016f8 <main>
  bx lr
 8001f1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001f28:	080035cc 	.word	0x080035cc
  ldr r2, =_sbss
 8001f2c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001f30:	200000cc 	.word	0x200000cc

08001f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_2_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x28>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x28>)
 8001f42:	f043 0310 	orr.w	r3, r3, #16
 8001f46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f923 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	200f      	movs	r0, #15
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fd06 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40022000 	.word	0x40022000

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f93b 	bl	80021fe <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f903 	bl	80021aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000018 	.word	0x20000018
 8001fbc:	20000028 	.word	0x20000028
 8001fc0:	20000024 	.word	0x20000024

08001fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_IncTick+0x1c>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a03      	ldr	r2, [pc, #12]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	20000028 	.word	0x20000028
 8001fe4:	200000c8 	.word	0x200000c8

08001fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b02      	ldr	r3, [pc, #8]	; (8001ff8 <HAL_GetTick+0x10>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	200000c8 	.word	0x200000c8

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4906      	ldr	r1, [pc, #24]	; (8002094 <__NVIC_EnableIRQ+0x34>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff90 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff2d 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff42 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff90 	bl	80020ec <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5f 	bl	8002098 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff35 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa2 	bl	8002150 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b08b      	sub	sp, #44	; 0x2c
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222a:	e148      	b.n	80024be <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800222c:	2201      	movs	r2, #1
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	429a      	cmp	r2, r3
 8002246:	f040 8137 	bne.w	80024b8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4aa3      	ldr	r2, [pc, #652]	; (80024dc <HAL_GPIO_Init+0x2c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d05e      	beq.n	8002312 <HAL_GPIO_Init+0xfa>
 8002254:	4aa1      	ldr	r2, [pc, #644]	; (80024dc <HAL_GPIO_Init+0x2c4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d875      	bhi.n	8002346 <HAL_GPIO_Init+0x12e>
 800225a:	4aa1      	ldr	r2, [pc, #644]	; (80024e0 <HAL_GPIO_Init+0x2c8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d058      	beq.n	8002312 <HAL_GPIO_Init+0xfa>
 8002260:	4a9f      	ldr	r2, [pc, #636]	; (80024e0 <HAL_GPIO_Init+0x2c8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d86f      	bhi.n	8002346 <HAL_GPIO_Init+0x12e>
 8002266:	4a9f      	ldr	r2, [pc, #636]	; (80024e4 <HAL_GPIO_Init+0x2cc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d052      	beq.n	8002312 <HAL_GPIO_Init+0xfa>
 800226c:	4a9d      	ldr	r2, [pc, #628]	; (80024e4 <HAL_GPIO_Init+0x2cc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d869      	bhi.n	8002346 <HAL_GPIO_Init+0x12e>
 8002272:	4a9d      	ldr	r2, [pc, #628]	; (80024e8 <HAL_GPIO_Init+0x2d0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d04c      	beq.n	8002312 <HAL_GPIO_Init+0xfa>
 8002278:	4a9b      	ldr	r2, [pc, #620]	; (80024e8 <HAL_GPIO_Init+0x2d0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d863      	bhi.n	8002346 <HAL_GPIO_Init+0x12e>
 800227e:	4a9b      	ldr	r2, [pc, #620]	; (80024ec <HAL_GPIO_Init+0x2d4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d046      	beq.n	8002312 <HAL_GPIO_Init+0xfa>
 8002284:	4a99      	ldr	r2, [pc, #612]	; (80024ec <HAL_GPIO_Init+0x2d4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d85d      	bhi.n	8002346 <HAL_GPIO_Init+0x12e>
 800228a:	2b12      	cmp	r3, #18
 800228c:	d82a      	bhi.n	80022e4 <HAL_GPIO_Init+0xcc>
 800228e:	2b12      	cmp	r3, #18
 8002290:	d859      	bhi.n	8002346 <HAL_GPIO_Init+0x12e>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <HAL_GPIO_Init+0x80>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	08002313 	.word	0x08002313
 800229c:	080022ed 	.word	0x080022ed
 80022a0:	080022ff 	.word	0x080022ff
 80022a4:	08002341 	.word	0x08002341
 80022a8:	08002347 	.word	0x08002347
 80022ac:	08002347 	.word	0x08002347
 80022b0:	08002347 	.word	0x08002347
 80022b4:	08002347 	.word	0x08002347
 80022b8:	08002347 	.word	0x08002347
 80022bc:	08002347 	.word	0x08002347
 80022c0:	08002347 	.word	0x08002347
 80022c4:	08002347 	.word	0x08002347
 80022c8:	08002347 	.word	0x08002347
 80022cc:	08002347 	.word	0x08002347
 80022d0:	08002347 	.word	0x08002347
 80022d4:	08002347 	.word	0x08002347
 80022d8:	08002347 	.word	0x08002347
 80022dc:	080022f5 	.word	0x080022f5
 80022e0:	08002309 	.word	0x08002309
 80022e4:	4a82      	ldr	r2, [pc, #520]	; (80024f0 <HAL_GPIO_Init+0x2d8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ea:	e02c      	b.n	8002346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	623b      	str	r3, [r7, #32]
          break;
 80022f2:	e029      	b.n	8002348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	3304      	adds	r3, #4
 80022fa:	623b      	str	r3, [r7, #32]
          break;
 80022fc:	e024      	b.n	8002348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	3308      	adds	r3, #8
 8002304:	623b      	str	r3, [r7, #32]
          break;
 8002306:	e01f      	b.n	8002348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	330c      	adds	r3, #12
 800230e:	623b      	str	r3, [r7, #32]
          break;
 8002310:	e01a      	b.n	8002348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800231a:	2304      	movs	r3, #4
 800231c:	623b      	str	r3, [r7, #32]
          break;
 800231e:	e013      	b.n	8002348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002328:	2308      	movs	r3, #8
 800232a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	611a      	str	r2, [r3, #16]
          break;
 8002332:	e009      	b.n	8002348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002334:	2308      	movs	r3, #8
 8002336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	615a      	str	r2, [r3, #20]
          break;
 800233e:	e003      	b.n	8002348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002340:	2300      	movs	r3, #0
 8002342:	623b      	str	r3, [r7, #32]
          break;
 8002344:	e000      	b.n	8002348 <HAL_GPIO_Init+0x130>
          break;
 8002346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2bff      	cmp	r3, #255	; 0xff
 800234c:	d801      	bhi.n	8002352 <HAL_GPIO_Init+0x13a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	e001      	b.n	8002356 <HAL_GPIO_Init+0x13e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d802      	bhi.n	8002364 <HAL_GPIO_Init+0x14c>
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	e002      	b.n	800236a <HAL_GPIO_Init+0x152>
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	3b08      	subs	r3, #8
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	210f      	movs	r1, #15
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	401a      	ands	r2, r3
 800237c:	6a39      	ldr	r1, [r7, #32]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	431a      	orrs	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8090 	beq.w	80024b8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002398:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	4a55      	ldr	r2, [pc, #340]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6193      	str	r3, [r2, #24]
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023b0:	4a51      	ldr	r2, [pc, #324]	; (80024f8 <HAL_GPIO_Init+0x2e0>)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	220f      	movs	r2, #15
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4013      	ands	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a49      	ldr	r2, [pc, #292]	; (80024fc <HAL_GPIO_Init+0x2e4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00d      	beq.n	80023f8 <HAL_GPIO_Init+0x1e0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a48      	ldr	r2, [pc, #288]	; (8002500 <HAL_GPIO_Init+0x2e8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <HAL_GPIO_Init+0x1dc>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a47      	ldr	r2, [pc, #284]	; (8002504 <HAL_GPIO_Init+0x2ec>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_GPIO_Init+0x1d8>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e004      	b.n	80023fa <HAL_GPIO_Init+0x1e2>
 80023f0:	2303      	movs	r3, #3
 80023f2:	e002      	b.n	80023fa <HAL_GPIO_Init+0x1e2>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_GPIO_Init+0x1e2>
 80023f8:	2300      	movs	r3, #0
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	f002 0203 	and.w	r2, r2, #3
 8002400:	0092      	lsls	r2, r2, #2
 8002402:	4093      	lsls	r3, r2
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800240a:	493b      	ldr	r1, [pc, #236]	; (80024f8 <HAL_GPIO_Init+0x2e0>)
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4937      	ldr	r1, [pc, #220]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002432:	4b35      	ldr	r3, [pc, #212]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	43db      	mvns	r3, r3
 800243a:	4933      	ldr	r1, [pc, #204]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 800243c:	4013      	ands	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	492d      	ldr	r1, [pc, #180]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	43db      	mvns	r3, r3
 8002462:	4929      	ldr	r1, [pc, #164]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 8002464:	4013      	ands	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4923      	ldr	r1, [pc, #140]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	491f      	ldr	r1, [pc, #124]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 800248c:	4013      	ands	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	4919      	ldr	r1, [pc, #100]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4915      	ldr	r1, [pc, #84]	; (8002508 <HAL_GPIO_Init+0x2f0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	3301      	adds	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f aeaf 	bne.w	800222c <HAL_GPIO_Init+0x14>
  }
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	372c      	adds	r7, #44	; 0x2c
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	10320000 	.word	0x10320000
 80024e0:	10310000 	.word	0x10310000
 80024e4:	10220000 	.word	0x10220000
 80024e8:	10210000 	.word	0x10210000
 80024ec:	10120000 	.word	0x10120000
 80024f0:	10110000 	.word	0x10110000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40010800 	.word	0x40010800
 8002500:	40010c00 	.word	0x40010c00
 8002504:	40011000 	.word	0x40011000
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	807b      	strh	r3, [r7, #2]
 8002546:	4613      	mov	r3, r2
 8002548:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800254a:	787b      	ldrb	r3, [r7, #1]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002556:	e003      	b.n	8002560 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	041a      	lsls	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	611a      	str	r2, [r3, #16]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	041a      	lsls	r2, r3, #16
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43d9      	mvns	r1, r3
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	400b      	ands	r3, r1
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e26c      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8087 	beq.w	80026ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025bc:	4b92      	ldr	r3, [pc, #584]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d00c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c8:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d112      	bne.n	80025fa <HAL_RCC_OscConfig+0x5e>
 80025d4:	4b8c      	ldr	r3, [pc, #560]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e0:	d10b      	bne.n	80025fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	4b89      	ldr	r3, [pc, #548]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d06c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x12c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d168      	bne.n	80026c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e246      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x76>
 8002604:	4b80      	ldr	r3, [pc, #512]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a7f      	ldr	r2, [pc, #508]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e02e      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7a      	ldr	r2, [pc, #488]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b78      	ldr	r3, [pc, #480]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a77      	ldr	r2, [pc, #476]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e01d      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0xbc>
 800263e:	4b72      	ldr	r3, [pc, #456]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a71      	ldr	r2, [pc, #452]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002658:	4b6b      	ldr	r3, [pc, #428]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6a      	ldr	r2, [pc, #424]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800265e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff fcb6 	bl	8001fe8 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7ff fcb2 	bl	8001fe8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1fa      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0xe4>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff fca2 	bl	8001fe8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff fc9e 	bl	8001fe8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1e6      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x10c>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d063      	beq.n	800279e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d6:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026e2:	4b49      	ldr	r3, [pc, #292]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d11c      	bne.n	8002728 <HAL_RCC_OscConfig+0x18c>
 80026ee:	4b46      	ldr	r3, [pc, #280]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d116      	bne.n	8002728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_OscConfig+0x176>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e1ba      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4939      	ldr	r1, [pc, #228]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	e03a      	b.n	800279e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_RCC_OscConfig+0x270>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff fc57 	bl	8001fe8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273e:	f7ff fc53 	bl	8001fe8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e19b      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4927      	ldr	r1, [pc, #156]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
 8002770:	e015      	b.n	800279e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b26      	ldr	r3, [pc, #152]	; (800280c <HAL_RCC_OscConfig+0x270>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7ff fc36 	bl	8001fe8 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7ff fc32 	bl	8001fe8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e17a      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03a      	beq.n	8002820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_RCC_OscConfig+0x274>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b8:	f7ff fc16 	bl	8001fe8 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7ff fc12 	bl	8001fe8 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e15a      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027de:	2001      	movs	r0, #1
 80027e0:	f000 faa6 	bl	8002d30 <RCC_Delay>
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_RCC_OscConfig+0x274>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7ff fbfc 	bl	8001fe8 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f2:	e00f      	b.n	8002814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f4:	f7ff fbf8 	bl	8001fe8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d908      	bls.n	8002814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e140      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	42420000 	.word	0x42420000
 8002810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	4b9e      	ldr	r3, [pc, #632]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e9      	bne.n	80027f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a6 	beq.w	800297a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b97      	ldr	r3, [pc, #604]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b94      	ldr	r3, [pc, #592]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a93      	ldr	r2, [pc, #588]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b91      	ldr	r3, [pc, #580]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b8e      	ldr	r3, [pc, #568]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b8b      	ldr	r3, [pc, #556]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a8a      	ldr	r2, [pc, #552]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7ff fbb9 	bl	8001fe8 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7ff fbb5 	bl	8001fe8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	; 0x64
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0fd      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x312>
 80028a0:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a7a      	ldr	r2, [pc, #488]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e02d      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028b6:	4b76      	ldr	r3, [pc, #472]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a75      	ldr	r2, [pc, #468]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	4b73      	ldr	r3, [pc, #460]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a72      	ldr	r2, [pc, #456]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	e01c      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x356>
 80028d8:	4b6d      	ldr	r3, [pc, #436]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a6c      	ldr	r2, [pc, #432]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a69      	ldr	r2, [pc, #420]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	e00b      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028f2:	4b67      	ldr	r3, [pc, #412]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a66      	ldr	r2, [pc, #408]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	4b64      	ldr	r3, [pc, #400]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a63      	ldr	r2, [pc, #396]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d015      	beq.n	800293e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002912:	f7ff fb69 	bl	8001fe8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7ff fb65 	bl	8001fe8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0ab      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	4b57      	ldr	r3, [pc, #348]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ee      	beq.n	800291a <HAL_RCC_OscConfig+0x37e>
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7ff fb53 	bl	8001fe8 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7ff fb4f 	bl	8001fe8 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e095      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ee      	bne.n	8002946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296e:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a47      	ldr	r2, [pc, #284]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8081 	beq.w	8002a86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002984:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d061      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d146      	bne.n	8002a26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002998:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <HAL_RCC_OscConfig+0x4fc>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7ff fb23 	bl	8001fe8 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7ff fb1f 	bl	8001fe8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e067      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d108      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ce:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	492d      	ldr	r1, [pc, #180]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a19      	ldr	r1, [r3, #32]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	430b      	orrs	r3, r1
 80029f2:	4927      	ldr	r1, [pc, #156]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_RCC_OscConfig+0x4fc>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7ff faf3 	bl	8001fe8 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a06:	f7ff faef 	bl	8001fe8 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e037      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46a>
 8002a24:	e02f      	b.n	8002a86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_RCC_OscConfig+0x4fc>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fadc 	bl	8001fe8 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7ff fad8 	bl	8001fe8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e020      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x498>
 8002a52:	e018      	b.n	8002a86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e013      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42420060 	.word	0x42420060

08002a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0d0      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d910      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0207 	bic.w	r2, r3, #7
 8002ac6:	4965      	ldr	r1, [pc, #404]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b63      	ldr	r3, [pc, #396]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0b8      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af8:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b10:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	494d      	ldr	r1, [pc, #308]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d040      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d115      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e07f      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e073      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e06b      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4936      	ldr	r1, [pc, #216]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7ff fa2c 	bl	8001fe8 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7ff fa28 	bl	8001fe8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e053      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d210      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 0207 	bic.w	r2, r3, #7
 8002bd2:	4922      	ldr	r1, [pc, #136]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e032      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4916      	ldr	r1, [pc, #88]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	490e      	ldr	r1, [pc, #56]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c2a:	f000 f821 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	490a      	ldr	r1, [pc, #40]	; (8002c64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3c:	5ccb      	ldrb	r3, [r1, r3]
 8002c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c42:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1cc>)
 8002c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1d0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff f98a 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40021000 	.word	0x40021000
 8002c64:	080035b4 	.word	0x080035b4
 8002c68:	20000018 	.word	0x20000018
 8002c6c:	20000024 	.word	0x20000024

08002c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c70:	b490      	push	{r4, r7}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c76:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c78:	1d3c      	adds	r4, r7, #4
 8002c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c80:	f240 2301 	movw	r3, #513	; 0x201
 8002c84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c9a:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x46>
 8002cae:	e02d      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb2:	623b      	str	r3, [r7, #32]
      break;
 8002cb4:	e02d      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0c5b      	lsrs	r3, r3, #17
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ce8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cee:	fb02 f203 	mul.w	r2, r2, r3
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	e004      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d00:	fb02 f303 	mul.w	r3, r2, r3
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	623b      	str	r3, [r7, #32]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0e:	623b      	str	r3, [r7, #32]
      break;
 8002d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d12:	6a3b      	ldr	r3, [r7, #32]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3728      	adds	r7, #40	; 0x28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc90      	pop	{r4, r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	080035a4 	.word	0x080035a4
 8002d24:	40021000 	.word	0x40021000
 8002d28:	007a1200 	.word	0x007a1200
 8002d2c:	003d0900 	.word	0x003d0900

08002d30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <RCC_Delay+0x34>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <RCC_Delay+0x38>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0a5b      	lsrs	r3, r3, #9
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d4c:	bf00      	nop
  }
  while (Delay --);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	60fa      	str	r2, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <RCC_Delay+0x1c>
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	20000018 	.word	0x20000018
 8002d68:	10624dd3 	.word	0x10624dd3

08002d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e041      	b.n	8002e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fe18 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	4619      	mov	r1, r3
 8002daa:	4610      	mov	r0, r2
 8002dac:	f000 fa6a 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e035      	b.n	8002e90 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <HAL_TIM_Base_Start_IT+0x90>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_TIM_Base_Start_IT+0x4e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d004      	beq.n	8002e5a <HAL_TIM_Base_Start_IT+0x4e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <HAL_TIM_Base_Start_IT+0x94>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d111      	bne.n	8002e7e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d010      	beq.n	8002e8e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7c:	e007      	b.n	8002e8e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0202 	mvn.w	r2, #2
 8002ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f9b1 	bl	800324e <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f9a4 	bl	800323c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f9b3 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0204 	mvn.w	r2, #4
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f987 	bl	800324e <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f97a 	bl	800323c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f989 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d122      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0208 	mvn.w	r2, #8
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f95d 	bl	800324e <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f950 	bl	800323c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f95f 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d122      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d11b      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0210 	mvn.w	r2, #16
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f933 	bl	800324e <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f926 	bl	800323c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f935 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0201 	mvn.w	r2, #1
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe fdb0 	bl	8001b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	2b80      	cmp	r3, #128	; 0x80
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d107      	bne.n	8003054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa67 	bl	8003522 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d10e      	bne.n	8003080 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d107      	bne.n	8003080 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8f9 	bl	8003272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b20      	cmp	r3, #32
 800308c:	d10e      	bne.n	80030ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b20      	cmp	r3, #32
 800309a:	d107      	bne.n	80030ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0220 	mvn.w	r2, #32
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa32 	bl	8003510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_ConfigClockSource+0x18>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e0b3      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x180>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d03e      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0xd0>
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310a:	f200 8087 	bhi.w	800321c <HAL_TIM_ConfigClockSource+0x168>
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	f000 8085 	beq.w	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	d87f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x168>
 800311c:	2b70      	cmp	r3, #112	; 0x70
 800311e:	d01a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0xa2>
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d87b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x168>
 8003124:	2b60      	cmp	r3, #96	; 0x60
 8003126:	d050      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x116>
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d877      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x168>
 800312c:	2b50      	cmp	r3, #80	; 0x50
 800312e:	d03c      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0xf6>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d873      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x168>
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d058      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x136>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d86f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x168>
 800313c:	2b30      	cmp	r3, #48	; 0x30
 800313e:	d064      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x156>
 8003140:	2b30      	cmp	r3, #48	; 0x30
 8003142:	d86b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x168>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d060      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x156>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d867      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x168>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05c      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x156>
 8003150:	2b10      	cmp	r3, #16
 8003152:	d05a      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003154:	e062      	b.n	800321c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f000 f95c 	bl	8003422 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003178:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	609a      	str	r2, [r3, #8]
      break;
 8003182:	e04e      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f000 f945 	bl	8003422 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a6:	609a      	str	r2, [r3, #8]
      break;
 80031a8:	e03b      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 f8bc 	bl	8003334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2150      	movs	r1, #80	; 0x50
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f913 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 80031c8:	e02b      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 f8da 	bl	8003390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2160      	movs	r1, #96	; 0x60
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f903 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 80031e8:	e01b      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 f89c 	bl	8003334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2140      	movs	r1, #64	; 0x40
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f8f3 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8003208:	e00b      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 f8ea 	bl	80033ee <TIM_ITRx_SetConfig>
        break;
 800321a:	e002      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003220:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a25      	ldr	r2, [pc, #148]	; (800332c <TIM_Base_SetConfig+0xa8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0x28>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x28>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <TIM_Base_SetConfig+0xac>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <TIM_Base_SetConfig+0xa8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <TIM_Base_SetConfig+0x52>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d003      	beq.n	80032d6 <TIM_Base_SetConfig+0x52>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <TIM_Base_SetConfig+0xac>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d108      	bne.n	80032e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a07      	ldr	r2, [pc, #28]	; (800332c <TIM_Base_SetConfig+0xa8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	615a      	str	r2, [r3, #20]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40000400 	.word	0x40000400

08003334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 030a 	bic.w	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 0210 	bic.w	r2, r3, #16
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	031b      	lsls	r3, r3, #12
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	f043 0307 	orr.w	r3, r3, #7
 8003410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800343c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	021a      	lsls	r2, r3, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	431a      	orrs	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	609a      	str	r2, [r3, #8]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003474:	2302      	movs	r3, #2
 8003476:	e041      	b.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a14      	ldr	r2, [pc, #80]	; (8003508 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d004      	beq.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10c      	bne.n	80034ea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40000400 	.word	0x40000400

08003510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	2600      	movs	r6, #0
 8003538:	4d0c      	ldr	r5, [pc, #48]	; (800356c <__libc_init_array+0x38>)
 800353a:	4c0d      	ldr	r4, [pc, #52]	; (8003570 <__libc_init_array+0x3c>)
 800353c:	1b64      	subs	r4, r4, r5
 800353e:	10a4      	asrs	r4, r4, #2
 8003540:	42a6      	cmp	r6, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	f000 f822 	bl	800358c <_init>
 8003548:	2600      	movs	r6, #0
 800354a:	4d0a      	ldr	r5, [pc, #40]	; (8003574 <__libc_init_array+0x40>)
 800354c:	4c0a      	ldr	r4, [pc, #40]	; (8003578 <__libc_init_array+0x44>)
 800354e:	1b64      	subs	r4, r4, r5
 8003550:	10a4      	asrs	r4, r4, #2
 8003552:	42a6      	cmp	r6, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	f855 3b04 	ldr.w	r3, [r5], #4
 800355c:	4798      	blx	r3
 800355e:	3601      	adds	r6, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	f855 3b04 	ldr.w	r3, [r5], #4
 8003566:	4798      	blx	r3
 8003568:	3601      	adds	r6, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	080035c4 	.word	0x080035c4
 8003570:	080035c4 	.word	0x080035c4
 8003574:	080035c4 	.word	0x080035c4
 8003578:	080035c8 	.word	0x080035c8

0800357c <memset>:
 800357c:	4603      	mov	r3, r0
 800357e:	4402      	add	r2, r0
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	f803 1b01 	strb.w	r1, [r3], #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <_init>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr

08003598 <_fini>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr
